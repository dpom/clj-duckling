[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3546#] (> (:grain p1__3546#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "numbers en", :pattern "[(integer 1 9) #\"en\" (integer 20 90 (fn* [p1__3547#] (#{70 20 60 50 40 90 30 80} (:value p1__3547#))))]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(geen|nul|niks|een|één|twee|drie|vier|vijftien|vijf|zestien|zes|zeventien|zeven|achtien|acht|negentien|negen|tien|elf|twaalf|dertien|veertien)\"", :production "{:dim :number, :integer true, :value (get {\"zes\" 6, \"één\" 1, \"zestien\" 16, \"acht\" 8, \"vijftien\" 15, \"vijf\" 5, \"zeven\" 7, \"niks\" 0, \"nul\" 0, \"een\" 1, \"negentien\" 19, \"negen\" 9, \"elf\" 11, \"achtien\" 18, \"vier\" 4, \"zeventien\" 17, \"dertien\" 13, \"twee\" 2, \"drie\" 3, \"veertien\" 14, \"twaalf\" 12, \"tien\" 10, \"geen\" 0} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)tien\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)dozijn\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "hundred", :pattern "#\"(?i)honderd\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)duizend\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)miljoen\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "couple", :pattern "#\"(?i)(een )?paar\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "few", :pattern "#\"(?i)meerdere\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(twintig|dertig|veertig|vijftig|zestig|zeventig|tachtig|negentig)\"", :production "{:dim :number, :integer true, :value (get {\"twintig\" 20, \"dertig\" 30, \"veertig\" 40, \"vijftig\" 50, \"zestig\" 60, \"zeventig\" 70, \"tachtig\" 80, \"negentig\" 90} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer ([2-9][1-9])", :pattern "#\"(?i)(een|twee|drie|vier|vijf|zes|zeven|acht|negen)(?:e|ë)n(twintig|dertig|veertig|vijftig|zestig|zeventig|tachtig|negentig)\"", :production "{:dim :number, :integer true, :value (+ (get {\"zes\" 6, \"acht\" 8, \"vijf\" 5, \"seven\" 7, \"een\" 1, \"negen\" 9, \"vier\" 4, \"twee\" 2, \"drie\" 3} (-> %1 :groups first clojure.string/lower-case)) (get {\"twintig\" 20, \"dertig\" 30, \"veertig\" 40, \"vijftig\" 50, \"zestig\" 60, \"zeventig\" 70, \"tachtig\" 80, \"negentig\" 90} (-> %1 :groups second clojure.string/lower-case)))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number hundreds", :pattern "[(integer 1 99) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (parse-number-fr (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") parse-number-fr)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|min|minus|negatief\" (dim :number (fn* [p1__3548#] (not (:number-prefixed p1__3548#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3549#] (not (:number-suffixed p1__3549#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..19th)", :pattern "#\"(?i)(eerste|tweede|derde|vierde|vijfde|zeste|zevende|achtste|negende|tiende|elfde|twaalfde|veertiende|vijftiende|zestiende|zeventiende|achtiende|negentiende)\"", :production "{:dim :ordinal, :value (get {\"tiende\" 10, \"eerste\" 1, \"zesde\" 6, \"derde\" 3, \"dertiende\" 13, \"negentiende\" 19, \"vierde\" 4, \"negende\" 9, \"zevende\" 7, \"vijftiende\" 15, \"twaalfde\" 12, \"elfde\" 11, \"achste\" 8, \"achtiende\" 18, \"zeventiende\" 17, \"veertiende\" 14, \"vijfde\" 5, \"tweede\" 2, \"zestiende\" 16} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)(\\.| ?(ste|de))\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]