[#clj-duckling.engine/rule {:name "integer (0..10)", :pattern "#\"ゼロ|零|一|二|三|四|五|六|七|八|九|十\"", :production "{:dim :number, :integer true, :value (get {\"零\" 0, \"七\" 7, \"十\" 10, \"一\" 1, \"五\" 5, \"二\" 2, \"ゼロ\" 0, \"八\" 8, \"三\" 3, \"九\" 9, \"六\" 6, \"四\" 4} (:text %1))}"}
 #clj-duckling.engine/rule {:name "integer (11..19)", :pattern "[#\"十\" (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ 10 (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "[(integer 2 9) #\"十\"]", :production "{:dim :number, :integer true, :value (* (:value %1) 10)}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 20 90 (fn* [p1__3545#] (#{70 20 60 50 40 90 30 80} (:value p1__3545#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (100)", :pattern "#\"百\"", :production "{:dim :number, :integer true, :value (get {\"百\" 100} (:text %1))}"}
 #clj-duckling.engine/rule {:name "integer (100..199)", :pattern "[#\"百\" (integer 1 99)]", :production "{:dim :number, :integer true, :value (+ 100 (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (200..900)", :pattern "[(integer 2 9) #\"百\"]", :production "{:dim :number, :integer true, :value (* (:value %1) 100)}"}
 #clj-duckling.engine/rule {:name "integer 201..999", :pattern "[(integer 200 900 (fn* [p1__3546#] (#{300 600 500 800 200 900 700 400} (:value p1__3546#)))) (integer 1 99)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (1000)", :pattern "#\"千\"", :production "{:dim :number, :integer true, :value (get {\"千\" 1000} (:text %1))}"}
 #clj-duckling.engine/rule {:name "integer (1000..1999)", :pattern "[#\"千\" (integer 1 999)]", :production "{:dim :number, :integer true, :value (+ 1000 (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (2000..9000)", :pattern "[(integer 2 9) #\"千\"]", :production "{:dim :number, :integer true, :value (* (:value %1) 1000)}"}
 #clj-duckling.engine/rule {:name "integer 2001..9999", :pattern "[(integer 2000 9000 (fn* [p1__3547#] (#{3000 9000 7000 8000 2000 4000 6000 5000} (:value p1__3547#)))) (integer 1 999)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (10000)", :pattern "#\"万\"", :production "{:dim :number, :integer true, :value (get {\"万\" 10000} (:text %1))}"}
 #clj-duckling.engine/rule {:name "integer (10000..19999)", :pattern "[#\"万\" (integer 1 9999)]", :production "{:dim :number, :integer true, :value (+ 10000 (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (20000..90000)", :pattern "[(integer 2 9) #\"万\"]", :production "{:dim :number, :integer true, :value (* (:value %1) 10000)}"}
 #clj-duckling.engine/rule {:name "integer 20001..99999", :pattern "[(integer 20000 90000 (fn* [p1__3548#] (#{20000 40000 80000 60000 30000 70000 90000 50000} (:value p1__3548#)))) (integer 1 9999)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "<number>个", :pattern "[(dim :number) #\"个\"]", :production "%1"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|マイナス\\s?|負\\s?\" (dim :number (fn* [p1__3549#] (not (:number-prefixed p1__3549#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G, 千, 万)", :pattern "[(dim :number (fn* [p1__3550#] (not (:number-suffixed p1__3550#)))) #\"(?i)([kmg])\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000, \"千\" 1000, \"万\" 10000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "[#\"第\" (dim :number)]", :production "{:dim :ordinal, :value (:value %2)}"}
 #clj-duckling.engine/rule {:name "integer (0..10)", :pattern "#\"[ゼロ|零|一|二|三|四|五|六|七|八|九|十][番]\"", :production "{:dim :number, :integer true, :value (get {\"七番\" 7, \"二番\" 2, \"九番\" 9, \"八番\" 8, \"五番\" 5, \"三番\" 3, \"一番\" 1, \"十番\" 10, \"四番\" 4, \"零番\" 0, \"六番\" 6} (:text %1))}"}]