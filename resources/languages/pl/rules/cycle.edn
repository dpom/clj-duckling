[#clj-duckling.engine/rule {:name "second (cycle)", :pattern "#\"(?i)sekund(y|zie|(e|ę)|om|ami|ach|o|a)?\"", :production "{:dim :cycle, :grain :second}"}
 #clj-duckling.engine/rule {:name "minute (cycle)", :pattern "#\"(?i)minut(y|cie|(e|ę)|om|o|ami|ach|(a|ą))?\"", :production "{:dim :cycle, :grain :minute}"}
 #clj-duckling.engine/rule {:name "hour (cycle)", :pattern "#\"(?i)godzin(y|(e|ę)|ie|om|o|ami|ach|(a|ą))?\"", :production "{:dim :cycle, :grain :hour}"}
 #clj-duckling.engine/rule {:name "day (cycle)", :pattern "#\"(?i)dzie(n|ń|ni(a|ą))|dni(owi|a|ą)?\"", :production "{:dim :cycle, :grain :day}"}
 #clj-duckling.engine/rule {:name "week (cycle)", :pattern "#\"(?i)tydzie(n|ń|)|tygod(ni(owi|u|a|em))|tygodn(iach|iami|iom|ie|i)|tyg\\.?\"", :production "{:dim :cycle, :grain :week}"}
 #clj-duckling.engine/rule {:name "month (cycle)", :pattern "#\"(?i)miesi(a|ą)c(owi|em|u|e|om|ami|ach|a)?\"", :production "{:dim :cycle, :grain :month}"}
 #clj-duckling.engine/rule {:name "quarter (cycle)", :pattern "#\"(?i)kwarta(l|ł)(u|owi|em|e|(o|ó)w|om|ach|ami|y)?\"", :production "{:dim :cycle, :grain :quarter}"}
 #clj-duckling.engine/rule {:name "year (cycle)", :pattern "#\"(?i)rok(u|owi|iem)?|lat(ami|ach|a|om)?\"", :production "{:dim :cycle, :grain :year}"}
 #clj-duckling.engine/rule {:name "this <cycle>", :pattern "[#\"(?i)te(mu|n|go|j)|tym|t(a|ą)|nadchodz(a|ą)c(ym|y|ego|emu|(a|ą)|ej)|obecn(ym|y|emu|ego|nym|(a|ą)|ej)\" (dim :cycle)]", :production "(cycle-nth (:grain %2) 0)"}
 #clj-duckling.engine/rule {:name "last <cycle>", :pattern "[#\"(?i)ostatni(ego|ch|emu|mi|m|(a|ą)|ej|e)?|(po ?)?przedni(ego|ch|emu|mi|m|e|(a|ą)|ej)?\" (dim :cycle)]", :production "(cycle-nth (:grain %2) -1)"}
 #clj-duckling.engine/rule {:name "next <cycle>", :pattern "[#\"(?i)kolejn(ym|y|ego|emu|(a|ą)|ej|e)|nast(e|ę)pn(ym|y|ego|emu|(a|ą)|ej|e)|przysz(l|ł)(ego|emu|ym|(a|ą)|ej|ych|i|ymi|y|e)|za\" (dim :cycle)]", :production "(cycle-nth (:grain %2) 1)"}
 #clj-duckling.engine/rule {:name "<cycle> after <time>", :pattern "[(dim :cycle) #\"(?i)po\" (dim :time)]", :production "(cycle-nth-after (:grain %1) 1 %3)"}
 #clj-duckling.engine/rule {:name "<cycle> before <time>", :pattern "[(dim :cycle) #\"(?i)przed\" (dim :time)]", :production "(cycle-nth-after (:grain %1) -1 %3)"}
 #clj-duckling.engine/rule {:name "last n <cycle>", :pattern "[#\"(?i)ostatni(ego|ch|emu|mi|m|(a|ą)|ej|e)?|(po ?)?przedni(ego|ch|emu|mi|m|e|(a|ą)|ej)?\" (integer 1 9999) (dim :cycle)]", :production "(cycle-n-not-immediate (:grain %3) (- (:value %2)))"}
 #clj-duckling.engine/rule {:name "next n <cycle>", :pattern "[#\"(?i)kolejn(ym|y|ego|emu|(a|ą)|ej|e)|nast(e|ę)pn(ym|y|ego|emu|(a|ą)|ej|e)\" (integer 1 9999) (dim :cycle)]", :production "(cycle-n-not-immediate (:grain %3) (:value %2))"}
 #clj-duckling.engine/rule {:name "<ordinal> <cycle> of <time>", :pattern "[(dim :ordinal) (dim :cycle) #\"(?i)w(e)?|z(e)?\" (dim :time)]", :production "(cycle-nth-after-not-immediate (:grain %2) (dec (:value %1)) %4)"}
 #clj-duckling.engine/rule {:name "<ordinal> <cycle> <time>", :pattern "[(dim :ordinal) (dim :cycle) (dim :time)]", :production "(cycle-nth-after-not-immediate (:grain %2) (dec (:value %1)) %3)"}
 #clj-duckling.engine/rule {:name "the <cycle> of <time>", :pattern "[#\"(?i)the\" (dim :cycle) #\"(?i)of\" (dim :time)]", :production "(cycle-nth-after-not-immediate (:grain %2) 0 %4)"}
 #clj-duckling.engine/rule {:name "<ordinal> <cycle> after <time>", :pattern "[(dim :ordinal) (dim :cycle) #\"(?i)after\" (dim :time)]", :production "(cycle-nth-after-not-immediate (:grain %2) (dec (:value %1)) %4)"}
 #clj-duckling.engine/rule {:name "the <ordinal> <cycle> after <time>", :pattern "[#\"(?i)the\" (dim :ordinal) (dim :cycle) #\"(?i)after\" (dim :time)]", :production "(cycle-nth-after-not-immediate (:grain %3) (dec (:value %2)) %5)"}
 #clj-duckling.engine/rule {:name "<ordinal> quarter", :pattern "[(dim :ordinal) (dim :cycle (fn* [p1__3545#] (= :quarter (:grain p1__3545#))))]", :production "(cycle-nth-after :quarter (dec (:value %1)) (cycle-nth :year 0))"}
 #clj-duckling.engine/rule {:name "<ordinal> quarter <year>", :pattern "[(dim :ordinal) (dim :cycle (fn* [p1__3546#] (= :quarter (:grain p1__3546#)))) (dim :time)]", :production "(cycle-nth-after :quarter (dec (:value %1)) %3)"}]