[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3547#] (> (:grain p1__3547#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "intersect (with and)", :pattern "[(dim :number :grain (fn* [p1__3548#] (> (:grain p1__3548#) 1))) #\"(?i)i|a\" (dim :number)]", :production "(compose-numbers %1 %3)"}
 #clj-duckling.engine/rule {:name "zero", :pattern "#\"(?i)(zero|nic)\"", :production "{:dim :number, :integer true, :value 0, :grain 1}"}
 #clj-duckling.engine/rule {:name "one", :pattern "#\"(?i)jed(en|nego|nemu|nym|nej|n(a|ą))\"", :production "{:dim :number, :integer true, :value 1, :grain 1}"}
 #clj-duckling.engine/rule {:name "two", :pattern "#\"(?i)dw(a|(o|ó)(ch|m)|oma|iema|ie)\"", :production "{:dim :number, :integer true, :value 2, :grain 1}"}
 #clj-duckling.engine/rule {:name "three", :pattern "#\"(?i)trz(y|ema|ech)\"", :production "{:dim :number, :integer true, :value 3, :grain 1}"}
 #clj-duckling.engine/rule {:name "four", :pattern "#\"(?i)czter(ej|y|ech|em|ema)\"", :production "{:dim :number, :integer true, :value 4, :grain 1}"}
 #clj-duckling.engine/rule {:name "five", :pattern "#\"(?i)pi(e|ę)(c|ć)(iu|oma|u)?\"", :production "{:dim :number, :integer true, :value 5, :grain 1}"}
 #clj-duckling.engine/rule {:name "six", :pattern "#\"(?i)sze(s|ś)(c|ć)(iu|oma|u)?\"", :production "{:dim :number, :integer true, :value 6, :grain 1}"}
 #clj-duckling.engine/rule {:name "seven", :pattern "#\"(?i)sied(miu|em|mioma)\"", :production "{:dim :number, :integer true, :value 7, :grain 1}"}
 #clj-duckling.engine/rule {:name "eight", :pattern "#\"(?i)o(s|ś)(iem|miu|mioma)\"", :production "{:dim :number, :integer true, :value 8, :grain 1}"}
 #clj-duckling.engine/rule {:name "nine", :pattern "#\"(?i)dziewi(e|ę)(ć|c)(iu|ioma)?\"", :production "{:dim :number, :integer true, :value 9, :grain 1}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)dzisi(e|ę)(ć|c)(iu|ioma)?\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "eleven", :pattern "#\"(?i)jedena(stu|(s|ś)cie|stoma)\"", :production "{:dim :number, :integer true, :value 11, :grain 1}"}
 #clj-duckling.engine/rule {:name "twelve", :pattern "#\"(?i)dwunast(u|oma)|dwana(ś|s)cie\"", :production "{:dim :number, :integer true, :value 12, :grain 1}"}
 #clj-duckling.engine/rule {:name "thirteen", :pattern "#\"(?i)trzyna(ś|s)(tu|cie|toma)\"", :production "{:dim :number, :integer true, :value 13, :grain 1}"}
 #clj-duckling.engine/rule {:name "fourteen", :pattern "#\"(?i)czterna(s|ś)(tu|cie|toma)\"", :production "{:dim :number, :integer true, :value 14, :grain 1}"}
 #clj-duckling.engine/rule {:name "fifteen", :pattern "#\"(?i)piętna(s|ś)(ta|tu|cie|toma)\"", :production "{:dim :number, :integer true, :value 15, :grain 1}"}
 #clj-duckling.engine/rule {:name "sixteen", :pattern "#\"(?i)szesna(s|ś)(tu|cie|toma)\"", :production "{:dim :number, :integer true, :value 16, :grain 1}"}
 #clj-duckling.engine/rule {:name "seventeen", :pattern "#\"(?i)siedemna(s|ś)(tu|cie|toma)\"", :production "{:dim :number, :integer true, :value 17, :grain 1}"}
 #clj-duckling.engine/rule {:name "eighteen", :pattern "#\"(?i)osiemna(s|ś)(tu|cie|toma)\"", :production "{:dim :number, :integer true, :value 18, :grain 1}"}
 #clj-duckling.engine/rule {:name "nineteen", :pattern "#\"(?i)dziewietna(s|ś)(tu|cie|toma)\"", :production "{:dim :number, :integer true, :value 19, :grain 1}"}
 #clj-duckling.engine/rule {:name "single", :pattern "#\"(?i)pojedynczy\"", :production "{:dim :number, :integer true, :value 1, :grain 1}"}
 #clj-duckling.engine/rule {:name "a pair", :pattern "#\"(?i)para?\"", :production "{:dim :number, :integer true, :value 2, :grain 1}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)tuzin\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "number 100", :pattern "#\"(?i)(sto|setki)\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "number 200", :pattern "#\"(?i)(dwie(ście| setki))\"", :production "{:dim :number, :integer true, :value 200, :grain 2}"}
 #clj-duckling.engine/rule {:name "number 300", :pattern "#\"(?i)(trzy(sta| setki))\"", :production "{:dim :number, :integer true, :value 300, :grain 2}"}
 #clj-duckling.engine/rule {:name "number 400", :pattern "#\"(?i)(cztery(sta| setki))\"", :production "{:dim :number, :integer true, :value 400, :grain 2}"}
 #clj-duckling.engine/rule {:name "number 500", :pattern "#\"(?i)(pięć(set| setek))\"", :production "{:dim :number, :integer true, :value 500, :grain 2}"}
 #clj-duckling.engine/rule {:name "number 600", :pattern "#\"(?i)(sześć(set| setek))\"", :production "{:dim :number, :integer true, :value 600, :grain 2}"}
 #clj-duckling.engine/rule {:name "number 700", :pattern "#\"(?i)(siedem(set| setek))\"", :production "{:dim :number, :integer true, :value 700, :grain 2}"}
 #clj-duckling.engine/rule {:name "number 800", :pattern "#\"(?i)(osiem(set| setek))\"", :production "{:dim :number, :integer true, :value 800, :grain 2}"}
 #clj-duckling.engine/rule {:name "number 900", :pattern "#\"(?i)(dziewięć(set| setek))\"", :production "{:dim :number, :integer true, :value 900, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)ty(s|ś)i(a|ą|ę)c(e|y)?\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)milion(y|ów)?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "couple", :pattern "#\"pare\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "a few", :pattern "#\"kilk(a|u)\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "twenty", :pattern "#\"(?i)dwadzie(ś|s)cia|dwudziest(u|oma)\"", :production "{:dim :number, :integer true, :value 20, :grain 1}"}
 #clj-duckling.engine/rule {:name "thirty", :pattern "#\"(?i)trzydzieści|trzydziest(u|oma)\"", :production "{:dim :number, :integer true, :value 30, :grain 1}"}
 #clj-duckling.engine/rule {:name "thirty", :pattern "#\"(?i)trzydzieści|trzydziest(u|oma)\"", :production "{:dim :number, :integer true, :value 30, :grain 1}"}
 #clj-duckling.engine/rule {:name "fou?rty", :pattern "#\"(?i)czterdzieści|czterdziest(u|oma)\"", :production "{:dim :number, :integer true, :value 40, :grain 1}"}
 #clj-duckling.engine/rule {:name "fifty", :pattern "#\"(?i)pięćdziesiąt|pięćdziesięci(u|oma)\"", :production "{:dim :number, :integer true, :value 50, :grain 1}"}
 #clj-duckling.engine/rule {:name "sixty", :pattern "#\"(?i)sześćdziesiąt|sześćdziesięci(u|oma)\"", :production "{:dim :number, :integer true, :value 60, :grain 1}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(twenty|thirty|fou?rty|fifty|sixty|seventy|eighty|ninety)\"", :production "{:dim :number, :integer true, :value (get {\"dwadzieścia\" 20, \"trzydzieści\" 30, \"czterdzieści\" 40, \"pięćdziesiąt\" 50, \"sześćdziesiąt\" 60, \"siedemdziesiąt\" 70, \"osiemdziesiąt\" 80, \"dziewięćdziesiąt\" 90} (-> %1 :groups first .toLowerCase)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3549#] (#{70 20 60 50 40 90 30 80} (:value p1__3549#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "special composition for missing hundreds like in one twenty two", :pattern "[(integer 1 9) (integer 10 99)]", :production "{:dim :number, :integer true, :value (+ (* (:value %1) 100) (:value %2)), :grain 1}"}
 #clj-duckling.engine/rule {:name "number dozen", :pattern "[(integer 1 10) (dim :number (fn* [p1__3550#] (:grouping p1__3550#)))]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3551#] (not (:number-prefixed p1__3551#)))) #\"(?i)dot|point\" (dim :number (fn* [p1__3552#] (not (:number-suffixed p1__3552#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|minus\\s?|negative\\s?\" (dim :number (fn* [p1__3553#] (not (:number-prefixed p1__3553#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3554#] (not (:number-suffixed p1__3554#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first .toLowerCase)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "first ordinal", :pattern "#\"(?i)pierw?sz(y|ego|emu|m|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 1}"}
 #clj-duckling.engine/rule {:name "second ordinal", :pattern "#\"(?i)drugi?(ego|emu|m|(a|ą)|ej)?\"", :production "{:dim :ordinal, :value 2}"}
 #clj-duckling.engine/rule {:name "third ordinal", :pattern "#\"(?i)trzeci(ego|ch|emu|m|mi|ej|(a|ą))?\"", :production "{:dim :ordinal, :value 3}"}
 #clj-duckling.engine/rule {:name "fourth ordinal", :pattern "#\"(?i)czwart(y|ego|emu|ym|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 4}"}
 #clj-duckling.engine/rule {:name "fifth ordinal", :pattern "#\"(?i)pi(a|ą)t(y|ego|emu|m|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 5}"}
 #clj-duckling.engine/rule {:name "sixth ordinal", :pattern "#\"(?i)sz(o|ó)st(y|ego|emu|m|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 6}"}
 #clj-duckling.engine/rule {:name "seventh ordinal", :pattern "#\"(?i)si(o|ó)dm(y|ego|emu|m|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 7}"}
 #clj-duckling.engine/rule {:name "8th ordinal", :pattern "#\"(?i)(o|ó|Ó)sm(y|ego|emu|m|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 8}"}
 #clj-duckling.engine/rule {:name "9th ordinal", :pattern "#\"(?i)dziewi(a|ą)t(ym|y|ego|em|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 9}"}
 #clj-duckling.engine/rule {:name "10th ordinal", :pattern "#\"(?i)dziesi(a|ą)t(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 10}"}
 #clj-duckling.engine/rule {:name "11th ordinal", :pattern "#\"(?i)jedenast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 11}"}
 #clj-duckling.engine/rule {:name "12th ordinal", :pattern "#\"(?i)dwunast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 12}"}
 #clj-duckling.engine/rule {:name "13th ordinal", :pattern "#\"(?i)trzynast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 13}"}
 #clj-duckling.engine/rule {:name "14th ordinal", :pattern "#\"(?i)czternast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 14}"}
 #clj-duckling.engine/rule {:name "15th ordinal", :pattern "#\"(?i)pi(e|ę)tnast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 15}"}
 #clj-duckling.engine/rule {:name "16th ordinal", :pattern "#\"(?i)szesnast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 16}"}
 #clj-duckling.engine/rule {:name "17th ordinal", :pattern "#\"(?i)siedemnast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 17}"}
 #clj-duckling.engine/rule {:name "18th ordinal", :pattern "#\"(?i)osiemnast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 18}"}
 #clj-duckling.engine/rule {:name "19th ordinal", :pattern "#\"(?i)dziewi(ę|e)tnast(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 19}"}
 #clj-duckling.engine/rule {:name "20th ordinal", :pattern "#\"(?i)dwudziest(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 20}"}
 #clj-duckling.engine/rule {:name "21st ordinal no space", :pattern "#\"(?i)dwudziest(ym|y|ego|emu|(a|ą)|ej)pierw?sz(y|ego|emu|m|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 21}"}
 #clj-duckling.engine/rule {:name "22nd ordinal no space", :pattern "#\"(?i)dwudziest(ym|y|ego|emu|(a|ą)|ej)drugi?(ego|emu|m|(a|ą)|ej)?\"", :production "{:dim :ordinal, :value 22}"}
 #clj-duckling.engine/rule {:name "23rd ordinal no space", :pattern "#\"(?i)dwudziest(ym|y|ego|emu|(a|ą)|ej)trzeci(ego|ch|emu|m|mi|ej|(a|ą))?\"", :production "{:dim :ordinal, :value 23}"}
 #clj-duckling.engine/rule {:name "24th ordinal no space", :pattern "#\"(?i)dwudziest(ym|y|ego|emu|(a|ą)|ej)czwart(y|ego|emu|ym|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 24}"}
 #clj-duckling.engine/rule {:name "21-29th ordinal", :pattern "[#\"(?i)dwudziest(ym|y|ego|emu|(a|ą)|ej)( |-)?\" (dim :ordinal)]", :production "{:dim :ordinal, :value (+ 20 (get %2 :value))}"}
 #clj-duckling.engine/rule {:name "30th ordinal", :pattern "#\"(?i)trzydziest(ym|y|ego|emu|(a|ą)|ej)\"", :production "{:dim :ordinal, :value 30}"}
 #clj-duckling.engine/rule {:name "31-39th ordinal", :pattern "[#\"(?i)trzydziest(ym|y|ego|emu|(a|ą)|ej)( |-)?\" (dim :ordinal)]", :production "{:dim :ordinal, :value (+ 30 (get %2 :value))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)( |-)?(szy|sza|szym|ego|go|szego|gi(ego|ej)?|st(a|y|ej)|t(ej|y|ego)|ci(ego)?)\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]