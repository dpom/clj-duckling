[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3551#] (> (:grain p1__3551#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "intersect (with and)", :pattern "[(dim :number :grain (fn* [p1__3552#] (> (:grain p1__3552#) 1))) #\"(?i)and\" (dim :number)]", :production "(compose-numbers %1 %3)"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(none|zilch|naught|nought|nil|zero|one|two|three|fourteen|four|five|sixteen|six|seventeen|seven|eighteen|eight|nineteen|nine|eleven|twelve|thirteen|fifteen)\"", :production "{:dim :number, :integer true, :value (get {\"none\" 0, \"six\" 6, \"eighteen\" 18, \"three\" 3, \"twelve\" 12, \"two\" 2, \"fifteen\" 15, \"fourteen\" 14, \"seven\" 7, \"zero\" 0, \"eleven\" 11, \"nineteen\" 19, \"zilch\" 0, \"five\" 5, \"naught\" 0, \"eight\" 8, \"one\" 1, \"seventeen\" 17, \"thirteen\" 13, \"nine\" 9, \"ten\" 10, \"nought\" 0, \"nil\" 0, \"four\" 4, \"sixteen\" 16} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)ten\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "single", :pattern "#\"(?i)single\"", :production "{:dim :number, :integer true, :value 1, :grain 1}"}
 #clj-duckling.engine/rule {:name "a pair", :pattern "#\"(?i)a pair( of)?\"", :production "{:dim :number, :integer true, :value 2, :grain 1}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)dozen\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "hundred", :pattern "#\"(?i)hundreds?\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)thousands?\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)millions?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "couple", :pattern "#\"(a )?couple( of)?\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "few", :pattern "#\"(a )?few\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(twenty|thirty|fou?rty|fifty|sixty|seventy|eighty|ninety)\"", :production "{:dim :number, :integer true, :value (get {\"ninety\" 90, \"eighty\" 80, \"fourty\" 40, \"forty\" 40, \"thirty\" 30, \"seventy\" 70, \"twenty\" 20, \"sixty\" 60, \"fifty\" 50} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3553#] (#{70 20 60 50 40 90 30 80} (:value p1__3553#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "special composition for missing hundreds like in one twenty two", :pattern "[(integer 1 9) (integer 10 99)]", :production "{:dim :number, :integer true, :value (+ (* (:value %1) 100) (:value %2)), :grain 1}"}
 #clj-duckling.engine/rule {:name "number dozen", :pattern "[(integer 1 10) (dim :number (fn* [p1__3554#] (:grouping p1__3554#)))]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number hundreds", :pattern "[(integer 1 99) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3555#] (not (:number-prefixed p1__3555#)))) #\"(?i)dot|point\" (dim :number (fn* [p1__3556#] (not (:number-suffixed p1__3556#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|minus\\s?|negative\\s?\" (dim :number (fn* [p1__3557#] (not (:number-prefixed p1__3557#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3558#] (not (:number-suffixed p1__3558#)))) #\"(?i)([kmg])(?=[\\W\\$â‚¬]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..31st)", :pattern "#\"(?i)(first|second|third|fourth|fifth|sixth|seventh|eighth|ninth|tenth|eleventh|twelfth|thirteenth|fourteenth|fifteenth|sixteenth|seventeenth|eighteenth|nineteenth|twentieth|twenty-first|twenty-second|twenty-third|twenty-fourth|twenty-fifth|twenty-sixth|twenty-seventh|twenty-eighth|twenty-ninth|thirtieth|thirty-first)\"", :production "{:dim :ordinal, :value (get {\"fifteenth\" 15, \"fourteenth\" 14, \"fifth\" 5, \"twenty-fifth\" 25, \"thirteenth\" 13, \"eleventh\" 11, \"second\" 2, \"thirty-first\" 31, \"sixth\" 6, \"third\" 3, \"seventh\" 7, \"twenty-sixth\" 26, \"twenty-second\" 22, \"tenth\" 10, \"twentieth\" 20, \"nineteenth\" 19, \"twenty-fourth\" 24, \"twenty-first\" 21, \"twelfth\" 12, \"twenty-ninth\" 29, \"sixteenth\" 16, \"eighth\" 8, \"eighteenth\" 18, \"fourth\" 4, \"twenty-eighth\" 28, \"twenty-seventh\" 27, \"seventeenth\" 17, \"twenty-third\" 23, \"ninth\" 9, \"thirtieth\" 30, \"first\" 1} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+) ?(st|nd|rd|th)\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]