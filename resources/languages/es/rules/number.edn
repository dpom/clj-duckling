[#clj-duckling.engine/rule {:name "number (0..15)", :pattern "#\"(?i)((c|z)ero|un(o|a)?|dos|tr(é|e)s|cuatro|cinco|s(e|é)is|siete|ocho|nueve|die(z|s)|once|doce|trece|catorce|quince)\"", :production "{:dim :number, :integer true, :value (get {\"un\" 1, \"cuatro\" 4, \"diez\" 10, \"dies\" 10, \"once\" 11, \"doce\" 12, \"siete\" 7, \"una\" 1, \"seis\" 6, \"quince\" 15, \"séis\" 6, \"uno\" 1, \"cinco\" 5, \"zero\" 0, \"nueve\" 9, \"trece\" 13, \"ocho\" 8, \"catorce\" 14, \"trés\" 3, \"tres\" 3, \"cero\" 0, \"dos\" 2} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number (20..90)", :pattern "#\"(?i)(veinte|treinta|cuarenta|cincuenta|sesenta|setenta|ochenta|noventa)\"", :production "{:dim :number, :integer true, :value (get {\"veinte\" 20, \"treinta\" 30, \"cuarenta\" 40, \"cincuenta\" 50, \"sesenta\" 60, \"setenta\" 70, \"ochenta\" 80, \"noventa\" 90} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number (16..19)", :pattern "[(integer 10 10) #\"(?i)y\" (integer 6 9)]", :production "{:dim :number, :integer true, :value (+ 10 (:value %3))}"}
 #clj-duckling.engine/rule {:name "number (21..29 31..39 41..49 51..59 61..69 71..79 81..89 91..99)", :pattern "[(integer 20 90 (fn* [p1__3550#] (#{70 20 60 50 40 90 30 80} (:value p1__3550#)))) #\"(?i)y\" (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "number (16..19 21..29)", :pattern "#\"(?i)(die(c|s)is(é|e)is|diecisiete|dieciocho|diecinueve|veintiun(o|a)|veintidos|veintitr(é|e)s|veinticuatro|veinticinco|veintis(é|e)is|veintisiete|veintiocho|veintinueve)\"", :production "{:dim :number, :integer true, :value (get {\"diecinueve\" 19, \"veintisiete\" 27, \"veintinueve\" 29, \"dieciocho\" 18, \"veintiuno\" 21, \"veintiocho\" 28, \"veintiuna\" 21, \"veintitrés\" 23, \"dieciseis\" 16, \"veinticinco\" 25, \"diesiséis\" 16, \"veintitres\" 23, \"diesiseis\" 16, \"veinticuatro\" 24, \"veintiséis\" 26, \"dieciséis\" 16, \"veintidos\" 22, \"veintiseis\" 26, \"diecisiete\" 17} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number 100..1000 ", :pattern "#\"(?i)(cien(to)?s?|doscientos|trescientos|cuatrocientos|quinientos|seiscientos|setecientos|ochocientos|novecientos|mil)\"", :production "{:dim :number, :integer true, :value (get {\"quinientos\" 500, \"doscientos\" 200, \"trescientos\" 300, \"seiscientos\" 600, \"mil\" 1000, \"cien\" 100, \"cientos\" 100, \"novecientos\" 900, \"setecientos\" 700, \"ochocientos\" 800, \"cuatrocientos\" 400, \"ciento\" 100} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "numbers 200..999", :pattern "[(integer 2 9) (integer 100 100) (integer 0 99)]", :production "{:dim :number, :integer true, :value (+ (* (:value %1) (:value %2)) (:value %3))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator .", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (parse-number-fr (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3551#] (not (:number-prefixed p1__3551#)))) #\"(?i)punto\" (dim :number (fn* [p1__3552#] (not (:number-suffixed p1__3552#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") parse-number-fr)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|menos\" (dim :number (fn* [p1__3553#] (not (:number-prefixed p1__3553#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3554#] (not (:number-suffixed p1__3554#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (primero..10)", :pattern "#\"(?i)(primer|tercer(os?|as?)?|(primer|segund|cuart|quint|sext|s[eé]ptim|octav|noven|d[eé]cim)(os?|as?))\"", :production "{:dim :ordinal, :value (get {\"terceros\" 3, \"primer\" 1, \"octavas\" 8, \"décimos\" 10, \"séptimas\" 7, \"quinto\" 5, \"quinta\" 5, \"segundo\" 2, \"segunda\" 2, \"octavo\" 8, \"octavos\" 8, \"decimo\" 10, \"septimas\" 7, \"decimos\" 10, \"novenos\" 9, \"décimo\" 10, \"tercera\" 3, \"cuarta\" 4, \"quintas\" 5, \"séptima\" 7, \"cuartas\" 4, \"sextos\" 6, \"septimos\" 7, \"novena\" 9, \"cuartos\" 4, \"cuarto\" 4, \"segundas\" 2, \"terceras\" 3, \"decimas\" 10, \"décima\" 10, \"septima\" 7, \"sexto\" 6, \"primero\" 1, \"decima\" 10, \"sexta\" 6, \"primeros\" 1, \"sextas\" 6, \"séptimo\" 7, \"séptimos\" 7, \"tercero\" 3, \"octava\" 8, \"segundos\" 2, \"septimo\" 7, \"primera\" 1, \"noveno\" 9, \"primeras\" 1, \"décimas\" 10, \"quintos\" 5, \"tercer\" 3, \"novenas\" 9} (-> %1 :groups first clojure.string/lower-case))}"}]