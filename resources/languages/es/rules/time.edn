[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :time (fn* [p1__3555#] (not (:latent p1__3555#)))) (dim :time (fn* [p1__3556#] (not (:latent p1__3556#))))]", :production "(intersect %1 %2)"}
 #clj-duckling.engine/rule {:name "intersect by `de`", :pattern "[(dim :time (fn* [p1__3557#] (not (:latent p1__3557#)))) #\"(?i)de\" (dim :time (fn* [p1__3558#] (not (:latent p1__3558#))))]", :production "(intersect %1 %3)"}
 #clj-duckling.engine/rule {:name "two time tokens separated by \",\"", :pattern "[(dim :time (fn* [p1__3559#] (not (:latent p1__3559#)))) #\",\" (dim :time (fn* [p1__3560#] (not (:latent p1__3560#))))]", :production "(intersect %1 %3)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)lunes|lun?\\.?\"", :production "(day-of-week 1)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)martes|mar?\\.?\"", :production "(day-of-week 2)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)mi(e|é)\\.?(rcoles)?|mx|mier?\\.\"", :production "(day-of-week 3)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)jueves|jue|jue\\.\"", :production "(day-of-week 4)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)viernes|vie|vie\\.\"", :production "(day-of-week 5)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)s[áa]bado|s(á|a)b\\.?\"", :production "(day-of-week 6)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)domingo|dom\\.?\"", :production "(day-of-week 7)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)enero|ene\\.?\"", :production "(month 1)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)febrero|feb\\.?\"", :production "(month 2)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)marzo|mar\\.?\"", :production "(month 3)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)abril|abr\\.?\"", :production "(month 4)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)mayo?\\.?\"", :production "(month 5)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)junio|jun\\.?\"", :production "(month 6)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)julio|jul\\.?\"", :production "(month 7)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)agosto|ago\\.?\"", :production "(month 8)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)septiembre|sept?\\.?\"", :production "(month 9)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)octubre|oct\\.?\"", :production "(month 10)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)noviembre|nov\\.?\"", :production "(month 11)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)diciembre|dic\\.?\"", :production "(month 12)"}
 #clj-duckling.engine/rule {:name "Navidad", :pattern "#\"(?i)(la )?navidad\"", :production "(month-day 12 25)"}
 #clj-duckling.engine/rule {:name "Nochevieja", :pattern "#\"(?i)nochevieja\"", :production "(month-day 12 31)"}
 #clj-duckling.engine/rule {:name "ano nuevo", :pattern "#\"(?i)a[nñ]o nuevo\"", :production "(month-day 1 1)"}
 #clj-duckling.engine/rule {:name "right now", :pattern "#\"ahor(it)?a|ya|en\\s?seguida|cuanto antes\"", :production "(cycle-nth :second 0)"}
 #clj-duckling.engine/rule {:name "now", :pattern "#\"(?i)(hoy)|(en este momento)\"", :production "(cycle-nth :day 0)"}
 #clj-duckling.engine/rule {:name "tomorrow", :pattern "#\"(?i)ma(n|ñ)ana\"", :production "(cycle-nth :day 1)"}
 #clj-duckling.engine/rule {:name "yesterday", :pattern "#\"(?i)ayer\"", :production "(cycle-nth :day -1)"}
 #clj-duckling.engine/rule {:name "the day after tomorrow", :pattern "#\"(?i)pasado\\s?ma(n|ñ)ana\"", :production "(cycle-nth :day 2)"}
 #clj-duckling.engine/rule {:name "the day before yesterday", :pattern "#\"(?i)anteayer|antes de (ayer|anoche)|antier\"", :production "(cycle-nth :day -2)"}
 #clj-duckling.engine/rule {:name "this <day-of-week>", :pattern "[#\"(?i)este\" {:form :named-day}]", :production "(pred-nth-not-immediate %2 0)"}
 #clj-duckling.engine/rule {:name "ce <time>", :pattern "[#\"(?i)este\" (dim :time)]", :production "(pred-nth %2 0)"}
 #clj-duckling.engine/rule {:name "<named-month|named-day> next", :pattern "[(dim :time) #\"(?i)que vienen?\"]", :production "(pred-nth %1 1)"}
 #clj-duckling.engine/rule {:name "<named-month|named-day> past", :pattern "[(dim :time) #\"(?i)pasad(o|a)\"]", :production "(pred-nth %1 -1)"}
 #clj-duckling.engine/rule {:name "year", :pattern "(integer 1000 2100)", :production "(year (:value %1))"}
 #clj-duckling.engine/rule {:name "year (latent)", :pattern "(integer -10000 999)", :production "(assoc (year (:value %1)) :latent true)"}
 #clj-duckling.engine/rule {:name "year (latent)", :pattern "(integer 2101 10000)", :production "(assoc (year (:value %1)) :latent true)"}
 #clj-duckling.engine/rule {:name "del <year>", :pattern "[#\"(?i)del( a[ñn]o)?\" (integer 1000 2100)]", :production "(year (:value %2))"}
 #clj-duckling.engine/rule {:name "day of month (1st)", :pattern "[#\"(?i)primero|uno|prem\\.?|1o\"]", :production "(day-of-month 1)"}
 #clj-duckling.engine/rule {:name "el <day-of-month> (non ordinal)", :pattern "[#\"(?i)el\" (integer 1 31)]", :production "(assoc (day-of-month (:value %2)) :latent true)"}
 #clj-duckling.engine/rule {:name "<day-of-month> de <named-month>", :pattern "[(integer 1 31) #\"(?i)de\" {:form :month}]", :production "(intersect %3 (day-of-month (:value %1)))"}
 #clj-duckling.engine/rule {:name "el <day-of-month> de <named-month>", :pattern "[#\"(?i)el\" (integer 1 31) #\"(?i)de\" {:form :month}]", :production "(intersect %4 (day-of-month (:value %2)))"}
 #clj-duckling.engine/rule {:name "ultimo <day-of-week> de <time>", :pattern "[#\"(?i)[ú|u]ltimo\" {:form :day-of-week} #\"(?i)de|en\" (dim :time)]", :production "(pred-last-of %2 %4)"}
 #clj-duckling.engine/rule {:name "nth <time> de <time>", :pattern "[(dim :ordinal) (dim :time) #\"(?i)de|en\" (dim :time)]", :production "(pred-nth (intersect %4 %2) (dec (:value %1)))"}
 #clj-duckling.engine/rule {:name "nth <time> de <time>", :pattern "[#\"(?i)the\" (dim :ordinal) (dim :time) #\"(?i)de|en\" (dim :time)]", :production "(pred-nth (intersect %5 %3) (dec (:value %2)))"}
 #clj-duckling.engine/rule {:name "<named-month> <day-of-month>", :pattern "[{:form :month} (integer 1 31)]", :production "(intersect %1 (day-of-month (:value %2)))"}
 #clj-duckling.engine/rule {:name "<day-of-week> <day-of-month>", :pattern "[{:form :day-of-week} (integer 1 31)]", :production "(intersect %1 (day-of-month (:value %2)))"}
 #clj-duckling.engine/rule {:name "time-of-day (latent)", :pattern "(integer 0 23)", :production "(assoc (hour (:value %1) true) :latent true)"}
 #clj-duckling.engine/rule {:name "noon", :pattern "#\"(?i)mediod(í|i)a\"", :production "(hour 12 false)"}
 #clj-duckling.engine/rule {:name "midnight", :pattern "#\"(?i)medianoche\"", :production "(hour 0 false)"}
 #clj-duckling.engine/rule {:name "<time-of-day> horas", :pattern "[(fn* [p1__3561#] (:full-hour p1__3561#)) #\"(?i)h\\.?(ora)?s?\"]", :production "(dissoc %1 :latent)"}
 #clj-duckling.engine/rule {:name "a las <time-of-day>", :pattern "[#\"(?i)(al?)( las?)?|las?\" {:form :time-of-day}]", :production "(dissoc %2 :latent)"}
 #clj-duckling.engine/rule {:name "a las <hour-min>(time-of-day)", :pattern "[#\"(?i)((al?)( las?)?|las?)\" {:form :time-of-day} #\"horas?\"]", :production "%2"}
 #clj-duckling.engine/rule {:name "hh(:|.|h)mm (time-of-day)", :pattern "#\"(?i)((?:[01]?\\d)|(?:2[0-3]))[:h\\.]([0-5]\\d)\"", :production "(hour-minute (Integer/parseInt (first (:groups %1))) (Integer/parseInt (second (:groups %1))) true)"}
 #clj-duckling.engine/rule {:name "<time-of-day> am|pm", :pattern "[{:form :time-of-day} #\"(?i)([ap])\\.?m?\\.?\"]", :production "(let [[p meridiem] (if (= \"a\" (-> %2 :groups first clojure.string/lower-case)) [[(hour 0) (hour 11) true] :am] [[(hour 12) (hour 23) true] :pm])] (-> (intersect %1 (apply interval p)) (assoc :form :time-of-day)))"}
 #clj-duckling.engine/rule {:name "quarter (relative minutes)", :pattern "#\"(?i)cuarto\"", :production "{:relative-minutes 15}"}
 #clj-duckling.engine/rule {:name "3 quarter (relative minutes)", :pattern "#\"(?i)(3|tres) cuartos?\"", :production "{:relative-minutes 45}"}
 #clj-duckling.engine/rule {:name "half (relative minutes)", :pattern "#\"y media\"", :production "{:relative-minutes 30}"}
 #clj-duckling.engine/rule {:name "number (as relative minutes)", :pattern "(integer 1 59)", :production "{:relative-minutes (:value %1)}"}
 #clj-duckling.engine/rule {:name "<integer> minutes (as relative minutes)", :pattern "[(integer 1 59) #\"(?i)min\\.?(uto)?s?\"]", :production "{:relative-minutes (:value %1)}"}
 #clj-duckling.engine/rule {:name "<hour-of-day> <integer> (as relative minutes)", :pattern "[(dim :time :full-hour) (fn* [p1__3562#] (:relative-minutes p1__3562#))]", :production "(hour-relativemin (:full-hour %1) (:relative-minutes %2) (:twelve-hour-clock? %1))"}
 #clj-duckling.engine/rule {:name "<hour-of-day> minus <integer> (as relative minutes)", :pattern "[(dim :time :full-hour) #\"menos\\s?\" (fn* [p1__3563#] (:relative-minutes p1__3563#))]", :production "(hour-relativemin (:full-hour %1) (- (:relative-minutes %3)) (:twelve-hour-clock? %1))"}
 #clj-duckling.engine/rule {:name "<hour-of-day> and <relative minutes>", :pattern "[(dim :time :full-hour) #\"y\" (fn* [p1__3564#] (:relative-minutes p1__3564#))]", :production "(hour-relativemin (:full-hour %1) (:relative-minutes %3) (:twelve-hour-clock? %1))"}
 #clj-duckling.engine/rule {:name "dd[/-.]mm[/-.]yyyy", :pattern "#\"(3[01]|[12]\\d|0?[1-9])[\\./-](0?[1-9]|1[0-2])[\\./-](\\d{2,4})\"", :production "(parse-dmy (first (:groups %1)) (second (:groups %1)) (nth (:groups %1) 2) true)"}
 #clj-duckling.engine/rule {:name "yyyy-mm-dd", :pattern "#\"(\\d{2,4})-(0?[1-9]|1[0-2])-(3[01]|[12]\\d|0?[1-9])\"", :production "(parse-dmy (nth (:groups %1) 2) (second (:groups %1)) (first (:groups %1)) true)"}
 #clj-duckling.engine/rule {:name "dd[/-]mm", :pattern "#\"(3[01]|[12]\\d|0?[1-9])[/-](0?[1-9]|1[0-2])\"", :production "(parse-dmy (first (:groups %1)) (second (:groups %1)) nil true)"}
 #clj-duckling.engine/rule {:name "morning", :pattern "#\"(?i)ma(ñ|n)ana\"", :production "(assoc (interval (hour 4 false) (hour 12 false) false) :form :part-of-day :latent true)"}
 #clj-duckling.engine/rule {:name "afternoon", :pattern "#\"(?i)tarde\"", :production "(assoc (interval (hour 12 false) (hour 19 false) false) :form :part-of-day :latent true)"}
 #clj-duckling.engine/rule {:name "del mediodía", :pattern "#\"(?i)del mediod[ií]a\"", :production "(assoc (interval (hour 12 false) (hour 17 false) false) :form :part-of-day :latent true)"}
 #clj-duckling.engine/rule {:name "evening", :pattern "#\"(?i)noche\"", :production "(assoc (interval (hour 18 false) (hour 0 false) false) :form :part-of-day :latent true)"}
 #clj-duckling.engine/rule {:name "in the <part-of-day>", :pattern "[#\"(?i)(a|en|de|por) la\" {:form :part-of-day}]", :production "(dissoc %2 :latent)"}
 #clj-duckling.engine/rule {:name "this <part-of-day>", :pattern "[#\"(?i)est(e|a)\" {:form :part-of-day}]", :production "(assoc (intersect (cycle-nth :day 0) %2) :form :part-of-day)"}
 #clj-duckling.engine/rule {:name "<time-of-day> <part-of-day>", :pattern "[(dim :time) {:form :part-of-day}]", :production "(intersect %1 %2)"}
 #clj-duckling.engine/rule {:name "<dim time> de la tarde", :pattern "[{:form :time-of-day} #\"(a|en|de) la tarde\"]", :production "(intersect %1 (assoc (interval (hour 12 false) (hour 21 false) false) :form :part-of-day :latent true))"}
 #clj-duckling.engine/rule {:name "<dim time> de la manana", :pattern "[{:form :time-of-day} #\"(a|en|de) la ma(ñ|n)ana\"]", :production "(intersect %1 (assoc (interval (hour 0 false) (hour 12 false) false) :form :part-of-day :latent true))"}
 #clj-duckling.engine/rule {:name "<integer> in the <part-of-day>", :pattern "[{:form :part-of-day} #\"(a|en|de|por) la\" (dim :time)]", :production "(intersect %3 %1)"}
 #clj-duckling.engine/rule {:name "week-end", :pattern "#\"(?i)week[ -]?end|fin de semana\"", :production "(interval (intersect (day-of-week 5) (hour 18 false)) (intersect (day-of-week 1) (hour 0 false)) false)"}
 #clj-duckling.engine/rule {:name "season", :pattern "#\"(?i)verano\"", :production "(interval (month-day 6 21) (month-day 9 23) false)"}
 #clj-duckling.engine/rule {:name "season", :pattern "#\"(?i)oto[ñn]o\"", :production "(interval (month-day 9 23) (month-day 12 21) false)"}
 #clj-duckling.engine/rule {:name "season", :pattern "#\"(?i)invierno\"", :production "(interval (month-day 12 21) (month-day 3 20) false)"}
 #clj-duckling.engine/rule {:name "season", :pattern "#\"(?i)primavera\"", :production "(interval (month-day 3 20) (month-day 6 21) false)"}
 #clj-duckling.engine/rule {:name "el <time>", :pattern "[#\"(?i)d?el\" (dim :time (fn* [p1__3565#] (not (:latent p1__3565#))))]", :production "%2"}
 #clj-duckling.engine/rule {:name "timezone", :pattern "#\"(?i)(YEKT|YEKST|YAPT|YAKT|YAKST|WT|WST|WITA|WIT|WIB|WGT|WGST|WFT|WEZ|WET|WESZ|WEST|WAT|WAST|VUT|VLAT|VLAST|VET|UZT|UYT|UYST|UTC|ULAT|TVT|TMT|TLT|TKT|TJT|TFT|TAHT|SST|SRT|SGT|SCT|SBT|SAST|SAMT|RET|PYT|PYST|PWT|PT|PST|PONT|PMST|PMDT|PKT|PHT|PHOT|PGT|PETT|PETST|PET|PDT|OMST|OMSST|NZST|NZDT|NUT|NST|NPT|NOVT|NOVST|NFT|NDT|NCT|MYT|MVT|MUT|MST|MSK|MSD|MMT|MHT|MEZ|MESZ|MDT|MAWT|MART|MAGT|MAGST|LINT|LHST|LHDT|KUYT|KST|KRAT|KRAST|KGT|JST|IST|IRST|IRKT|IRKST|IRDT|IOT|IDT|ICT|HOVT|HNY|HNT|HNR|HNP|HNE|HNC|HNA|HLV|HKT|HAY|HAT|HAST|HAR|HAP|HAE|HADT|HAC|HAA|GYT|GST|GMT|GILT|GFT|GET|GAMT|GALT|FNT|FKT|FKST|FJT|FJST|ET|EST|EGT|EGST|EET|EEST|EDT|ECT|EAT|EAST|EASST|DAVT|ChST|CXT|CVT|CST|COT|CLT|CLST|CKT|CHAST|CHADT|CET|CEST|CDT|CCT|CAT|CAST|BTT|BST|BRT|BRST|BOT|BNT|AZT|AZST|AZOT|AZOST|AWST|AWDT|AST|ART|AQTT|ANAT|ANAST|AMT|AMST|ALMT|AKST|AKDT|AFT|AEST|AEDT|ADT|ACST|ACDT)\"", :production "{:dim :timezone, :value (-> %1 :groups first clojure.string/upper-case)}"}
 #clj-duckling.engine/rule {:name "<time> timezone", :pattern "[(dim :time) (dim :timezone)]", :production "(assoc %1 :timezone (:value %2))"}
 #clj-duckling.engine/rule {:name "dd-dd <month>(interval)", :pattern "[#\"(3[01]|[12]\\d|0?[1-9])\" #\"(?i)\\-|al?\" #\"(3[01]|[12]\\d|0?[1-9])\" #\"(?i)de\" {:form :month}]", :production "(interval (intersect %5 (day-of-month (Integer/parseInt (-> %1 :groups first)))) (intersect %5 (day-of-month (Integer/parseInt (-> %3 :groups first)))) true)"}
 #clj-duckling.engine/rule {:name "entre dd et dd <month>(interval)", :pattern "[#\"entre( el)?\" #\"(0?[1-9]|[12]\\d|3[01])\" #\"y( el)?\" #\"(0?[1-9]|[12]\\d|3[01])\" #\"(?i)de\" {:form :month}]", :production "(interval (intersect %6 (day-of-month (Integer/parseInt (-> %2 :groups first)))) (intersect %6 (day-of-month (Integer/parseInt (-> %4 :groups first)))) true)"}
 #clj-duckling.engine/rule {:name "<datetime> - <datetime> (interval)", :pattern "[(dim :time (fn* [p1__3566#] (not (:latent p1__3566#)))) #\"\\-|al?\" (dim :time (fn* [p1__3567#] (not (:latent p1__3567#))))]", :production "(interval %1 %3 false)"}
 #clj-duckling.engine/rule {:name "de <datetime> - <datetime> (interval)", :pattern "[#\"(?i)del?\" (dim :time) #\"\\-|al?\" (dim :time)]", :production "(interval %2 %4 false)"}
 #clj-duckling.engine/rule {:name "entre <datetime> et <datetime> (interval)", :pattern "[#\"(?i)entre\" (dim :time) #\"y\" (dim :time)]", :production "(interval %2 %4 false)"}
 #clj-duckling.engine/rule {:name "dentro de <duration>", :pattern "[#\"(?i)dentro de\" (dim :duration)]", :production "(interval (cycle-nth :second 0) (in-duration (:value %2)) false)"}]