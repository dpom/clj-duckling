[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3545#] (> (:grain p1__3545#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "integer (0..9)", :pattern "#\"(?i)(yok|hiç|sıfır|bir|bi|tek|yek|iki|üç|dört|beş|altı|yedi|sekiz|dokuz)\"", :production "{:dim :number, :integer true, :value (get {\"yedi\" 7, \"dokuz\" 9, \"bir\" 1, \"iki\" 2, \"beş\" 5, \"bi\" 1, \"sıfır\" 0, \"sekiz\" 8, \"dört\" 4, \"yok\" 0, \"altı\" 6, \"hiç\" 0, \"yek\" 1, \"üç\" 3, \"tek\" 1} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)on\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "a couple (of)", :pattern "#\"(?i)(bir )?çift\"", :production "{:dim :number, :integer true, :value 2, :grain 1}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)düzine\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "group of ten(s)", :pattern "#\"(?i)deste\"", :production "{:dim :number, :integer true, :value 10, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "hundred", :pattern "#\"(?i)yüz\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)bin\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)milyon\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "few", :pattern "#\"(bir)?az\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "integer (10..90)", :pattern "#\"(?i)(on|yirmi|otuz|kırk|elli|atmış|altmış|yetmiş|seksen|doksan)\"", :production "{:dim :number, :integer true, :value (get {\"doksan\" 90, \"yirmi\" 20, \"otuz\" 30, \"on\" 10, \"altmış\" 60, \"elli\" 50, \"seksen\" 80, \"atmış\" 60, \"yetmiş\" 70, \"kırk\" 40} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 11..19 21..29 31..39 41..49 51..59 61..69 71..79 81..89 91..99", :pattern "#\"(?i)((on|yirmi|otuz|kırk|elli|atmış|altmış|yetmiş|seksen|doksan)(bir|bi|iki|üç|dört|beş|altı|yedi|sekiz|dokuz))\"", :production "{:dim :number, :integer true, :value (get {\"onbeş\" 15, \"ellidört\" 54, \"atmışbeş\" 65, \"elliüç\" 53, \"kırkbeş\" 45, \"yirmidokuz\" 29, \"elliiki\" 52, \"atmışaltı\" 66, \"seksenaltı\" 86, \"altmışsekiz\" 68, \"atmışdört\" 64, \"doksanüç\" 93, \"seksendört\" 84, \"doksanaltı\" 96, \"kırkyedi\" 47, \"oniki\" 12, \"onaltı\" 16, \"yetmişdört\" 74, \"kırksekiz\" 48, \"yirmidört\" 24, \"doksanyedi\" 97, \"elliyedi\" 57, \"yetmişaltı\" 76, \"doksandokuz\" 99, \"seksenüç\" 83, \"kırkbir\" 41, \"otuzüç\" 33, \"seksendokuz\" 89, \"otuzaltı\" 36, \"yetmişbeş\" 75, \"yetmişdokuz\" 79, \"yirmiiki\" 22, \"kırkdört\" 44, \"onbi\" 11, \"otuzdört\" 34, \"atmışiki\" 62, \"seksensekiz\" 88, \"onsekiz\" 18, \"ellidokuz\" 59, \"doksandört\" 94, \"atmışsekiz\" 68, \"doksaniki\" 92, \"atmışdokuz\" 69, \"otuzyedi\" 37, \"onyedi\" 17, \"kırkaltı\" 46, \"sekseniki\" 82, \"yetmişiki\" 72, \"doksansekiz\" 98, \"atmışüç\" 63, \"otuzsekiz\" 38, \"kırkdokuz\" 49, \"yetmişbir\" 71, \"yirmibi\" 21, \"onüç\" 13, \"ellisekiz\" 58, \"otuzbi\" 31, \"altmışdokuz\" 69, \"yetmişsekiz\" 78, \"altmışiki\" 62, \"altmışdört\" 64, \"yetmişüç\" 73, \"kırkbi\" 41, \"yirmialtı\" 26, \"altmışbir\" 61, \"yetmişbi\" 71, \"doksanbi\" 91, \"altmışüç\" 63, \"altmışyedi\" 67, \"ellialtı\" 56, \"ondört\" 14, \"ellibeş\" 55, \"yetmişyedi\" 77, \"otuzbir\" 31, \"seksenbir\" 81, \"atmışbir\" 61, \"doksanbir\" 91, \"ondokuz\" 19, \"seksenbeş\" 85, \"atmışyedi\" 67, \"onbir\" 11, \"ellibi\" 51, \"doksanbeş\" 95, \"yirmisekiz\" 28, \"otuzdokuz\" 39, \"altmışaltı\" 66, \"kırkiki\" 42, \"yirmiyedi\" 27, \"seksenyedi\" 87, \"ellibir\" 51, \"yirmibeş\" 25, \"altmışbeş\" 65, \"kırküç\" 43, \"seksenbi\" 81, \"otuziki\" 32, \"otuzbeş\" 35, \"yirmibir\" 21, \"yirmiüç\" 23} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 11..99", :pattern "[(integer 10 90 (fn* [p1__3546#] (#{70 20 60 50 40 90 30 10 80} (:value p1__3546#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer 100..900", :pattern "#\"(?i)(yüz|ikiyüz|üçyüz|dörtyüz|beşyüz|altıyüz|yediyüz|sekizyüz|dokuzyüz)\"", :production "{:dim :number, :integer true, :value (get {\"yediyüz\" 700, \"üçyüz\" 300, \"sekizyüz\" 800, \"yüz\" 100, \"beşyüz\" 500, \"altıyüz\" 600, \"dokuzyüz\" 900, \"ikiyüz\" 200, \"dörtyüz\" 400} (-> %1 :groups first clojure.string/lower-case)), :grain 2}"}
 #clj-duckling.engine/rule {:name "integer 1000..9000", :pattern "#\"(?i)(bin|ikibin|üçbin|dörtbin|beşbin|altıbin|yedibin|sekizbin|dokuzbin)\"", :production "{:dim :number, :integer true, :value (get {\"beşbin\" 5000, \"üçbin\" 3000, \"sekizbin\" 8000, \"yedibin\" 7000, \"ikibin\" 2000, \"bin\" 1000, \"altıbin\" 6000, \"dokuzbin\" 9000, \"dörtbin\" 4000} (-> %1 :groups first clojure.string/lower-case)), :grain 3}"}
 #clj-duckling.engine/rule {:name "integer 10000..90000", :pattern "#\"(?i)(onbin|yirmibin|otuzbin|kırkbin|ellibin|atmışbin|altmışbin|yetmişbin|seksenbin|doksanbin)\"", :production "{:dim :number, :integer true, :value (get {\"ellibin\" 50000, \"altmışbin\" 60000, \"otuzbin\" 30000, \"kırkbin\" 40000, \"yirmibin\" 20000, \"atmışbin\" 60000, \"doksanbin\" 90000, \"onbin\" 10000, \"yetmişbin\" 70000, \"seksenbin\" 80000} (-> %1 :groups first clojure.string/lower-case)), :grain 4}"}
 #clj-duckling.engine/rule {:name "integer 100000..900000", :pattern "#\"(?i)(yüzbin|ikiyüzbin|üçyüzbin|dörtyüzbin|beşyüzbin|altıyüzbin|yediyüzbin|sekizyüzbin|dokuzyüzbin)\"", :production "{:dim :number, :integer true, :value (get {\"üçyüzbin\" 300000, \"ikiyüzbin\" 200000, \"yüzbin\" 100000, \"yediyüzbin\" 700000, \"sekizyüzbin\" 800000, \"dokuzyüzbin\" 900000, \"beşyüzbin\" 500000, \"dörtyüzbin\" 400000, \"altıyüzbin\" 600000} (-> %1 :groups first clojure.string/lower-case)), :grain 5}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "number dozen", :pattern "[(integer 1 100) (dim :number (fn* [p1__3547#] (:grouping p1__3547#)))]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number hundreds", :pattern "[(integer 2 9) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 2 999) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "quarter", :pattern "#\"(?i)(çeyrek)\"", :production "{:dim :number, :value 0.25}"}
 #clj-duckling.engine/rule {:name "half", :pattern "#\"(?i)(yarım)\"", :production "{:dim :number, :value 0.5}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3548#] (not (:number-prefixed p1__3548#)))) #\"(?i)nokta|virgül\" (dim :number (fn* [p1__3549#] (not (:number-suffixed p1__3549#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|eksi\\s?|negatif\\s?\" (dim :number (fn* [p1__3550#] (not (:number-prefixed p1__3550#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3551#] (not (:number-suffixed p1__3551#)))) #\"(?i)([kmgb])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000, \"b\" 1000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "number suffixes (half-suffix)", :pattern "[(dim :number (fn* [p1__3552#] (not (:half-suffixed p1__3552#)))) #\"(?i)(buçuk)(?=[\\W\\$€]|$)\"]", :production "(let [value (+ (long (:value %1)) 0.5) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :half-suffixed true))"}
 #clj-duckling.engine/rule {:name "number suffixes (half-suffix text) (1..9)", :pattern "#\"(?i)((bir|bi|iki|üç|dört|beş|altı|yedi|sekiz|dokuz)(buçuk))\"", :production "{:dim :number, :value (get {\"dokuzbuçuk\" 9.5, \"ikibuçuk\" 2.5, \"dörtbuçuk\" 4.5, \"birbuçuk\" 1.5, \"üçbuçuk\" 3.5, \"sekizbuçuk\" 8.5, \"beşbuçuk\" 5.5, \"altıbuçuk\" 6.5, \"yedibuçuk\" 7.5, \"bibuçuk\" 1.5} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number suffixes (half-suffix text) (10..90)", :pattern "#\"(?i)((on|yirmi|otuz|kırk|elli|atmış|altmış|yetmiş|seksen|doksan)(buçuk))\"", :production "{:dim :number, :value (get {\"onbuçuk\" 10.5, \"yirmibuçuk\" 20.5, \"yetmişbuçuk\" 70.5, \"seksenbuçuk\" 80.5, \"ellibuçuk\" 50.5, \"kırkbuçuk\" 40.5, \"otuzbuçuk\" 30.5, \"atmışbuçuk\" 60.5, \"altmışbuçuk\" 60.5, \"doksanbuçuk\" 90.5} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "integer 11..19 21..29 31..39 41..49 51..59 61..69 71..79 81..89 91..99", :pattern "#\"(?i)((on|yirmi|otuz|kırk|elli|atmış|altmış|yetmiş|seksen|doksan)(bir|bi|iki|üç|dört|beş|altı|yedi|sekiz|dokuz)(buçuk))\"", :production "{:dim :number, :value (get {\"yirmidokuzbuçuk\" 29.5, \"atmışyedibuçuk\" 67.5, \"otuzdokuzbuçuk\" 39.5, \"altmışdokuzbuçuk\" 69.5, \"kırkbeşbuçuk\" 45.5, \"yetmişdokuzbuçuk\" 79.5, \"ellialtıbuçuk\" 56.5, \"kırkbirbuçuk\" 41.5, \"yetmişdörtbuçuk\" 74.5, \"yirmialtıbuçuk\" 26.5, \"seksenbeşbuçuk\" 85.5, \"seksendokuzbuçuk\" 89.5, \"doksanbirbuçuk\" 91.5, \"doksanbibuçuk\" 91.5, \"ondokuzbuçuk\" 19.5, \"doksanyedibuçuk\" 97.5, \"altmışbeşbuçuk\" 65.5, \"onbirbuçuk\" 11.5, \"otuzikibuçuk\" 32.5, \"doksandörtbuçuk\" 94.5, \"yirmibeşbuçuk\" 25.5, \"otuzyedibuçuk\" 37.5, \"ellidörtbuçuk\" 54, \"yirmibibuçuk\" 21.5, \"atmışbeşbuçuk\" 65.5, \"seksenyedibuçuk\" 87.5, \"altmışaltıbuçuk\" 66.5, \"onyedibuçuk\" 17.5, \"seksenbibuçuk\" 81.5, \"seksenaltıbuçuk\" 86.5, \"otuzüçbuçuk\" 33.5, \"doksansekizbuçuk\" 98.5, \"doksanikibuçuk\" 92.5, \"onbibuçuk\" 11.5, \"altmışbirbuçuk\" 61.5, \"atmışaltıbuçuk\" 66.5, \"onüçbuçuk\" 13.5, \"otuzaltıbuçuk\" 36.5, \"yetmişikibuçuk\" 72.5, \"altmışsekizbuçuk\" 68.5, \"yetmişbeşbuçuk\" 75.5, \"altmışikibuçuk\" 62.5, \"yetmişüçbuçuk\" 73.5, \"atmışsekizbuçuk\" 68.5, \"yetmişbibuçuk\" 71.5, \"ellidokuzbuçuk\" 59.5, \"onikibuçuk\" 12.5, \"doksanaltıbuçuk\" 96.5, \"kırkdokuzbuçuk\" 49.5, \"atmışdokuzbuçuk\" 69.5, \"doksandokuzbuçuk\" 99.5, \"onsekizbuçuk\" 18.5, \"altmışdörtbuçuk\" 64.5, \"otuzbibuçuk\" 31.5, \"yirmiyedibuçuk\" 27.5, \"altmışyedibuçuk\" 67.5, \"atmışbirbuçuk\" 61.5, \"kırkbibuçuk\" 41.5, \"otuzsekizbuçuk\" 38.5, \"yetmişsekizbuçuk\" 78.5, \"yirmiüçbuçuk\" 23.5, \"elliyedibuçuk\" 57.5, \"yetmişaltıbuçuk\" 76.5, \"seksendörtbuçuk\" 84.5, \"elliüçbuçuk\" 53.5, \"kırkdörtbuçuk\" 44, \"seksensekizbuçuk\" 88.5, \"onaltıbuçuk\" 16.5, \"yirmiikibuçuk\" 22.5, \"atmışüçbuçuk\" 63.5, \"yetmişbirbuçuk\" 71.5, \"atmışdörtbuçuk\" 64.5, \"altmışüçbuçuk\" 63.5, \"kırksekizbuçuk\" 48.5, \"seksenikibuçuk\" 82.5, \"onbeşbuçuk\" 15.5, \"yetmişyedibuçuk\" 77.5, \"kırküçbuçuk\" 43.5, \"kırkaltıbuçuk\" 46.5, \"atmışikibuçuk\" 62.5, \"otuzbirbuçuk\" 31.5, \"ellisekizbuçuk\" 58.5, \"yirmibirbuçuk\" 21.5, \"yirmisekizbuçuk\" 28.5, \"kırkikibuçuk\" 42.5, \"elliikibuçuk\" 52.5, \"seksenbirbuçuk\" 81.5, \"ellibibuçuk\" 51.5, \"ellibeşbuçuk\" 55.5, \"yirmidörtbuçuk\" 24.5, \"otuzdörtbuçuk\" 34, \"ellibirbuçuk\" 51.5, \"ondörtbuçuk\" 14.5, \"otuzbeşbuçuk\" 35.5, \"seksenüçbuçuk\" 83.5, \"doksanbeşbuçuk\" 95.5, \"kırkyedibuçuk\" 47.5, \"doksanüçbuçuk\" 93.5} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "decimal thousand | million", :pattern "[(dim :number (fn* [p1__3553#] (< (:value p1__3553#) 999.9)) (fn* [p1__3554#] (not (:integer p1__3554#)))) (integer 1000 1000000 (fn* [p1__3555#] (#{1000000 1000} (:value p1__3555#))))]", :production "(let [value (* (:value %1) (long (:value %2))) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int?))"}
 #clj-duckling.engine/rule {:name "ordinals (first..31st)", :pattern "#\"(?i)(birinci|ikinci|üçüncü|dördüncü|beşinci|altıncı|yedinci|sekizinci|dokuzuncu|onuncu|on birinci|on ikinci|on üçüncü|on dördüncü|on beşinci|on altıncı|on yedinci|on sekizinci|on dokuzuncu|yirminci|yirmi birinci|yirmi ikinci|yirmi üçüncü|yirmi dördüncü|yirmi beşinci|yirmi altıncı|yirmi yedinci|yirmi sekizinci|yirmi dokuzuncu|otuzuncu|otuz birinci)\"", :production "{:dim :ordinal, :value (get {\"on beşinci\" 15, \"yirmi yedinci\" 27, \"on birinci\" 11, \"yirminci\" 20, \"onuncu\" 10, \"ikinci\" 2, \"otuz birinci\" 31, \"on yedinci\" 17, \"yirmi dokuzuncu\" 29, \"on dokuzuncu\" 19, \"yirmi sekizinci\" 28, \"beşinci\" 5, \"on dördüncü\" 14, \"yirmi birinci\" 21, \"yedinci\" 7, \"dördüncü\" 4, \"altıncı\" 6, \"yirmi üçüncü\" 23, \"sekizinci\" 8, \"on altıncı\" 16, \"yirmi beşinci\" 25, \"on ikinci\" 12, \"birinci\" 1, \"on üçüncü\" 13, \"otuzuncu\" 30, \"yirmi altıncı\" 26, \"yirmi dördüncü\" 24, \"yirmi ikinci\" 22, \"üçüncü\" 3, \"on sekizinci\" 18, \"dokuzuncu\" 9} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+) ?('?)(inci|nci|ıncı|ncı|uncu|ncu|üncü|ncü|.)\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]