[#clj-duckling.engine/rule {:name "number (0..15)", :pattern "#\"(?i)(zero|uma?|d(oi|ua)s|tr(ê|e)s|quatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|(ca|qua)torze|quinze)\"", :production "{:dim :number, :integer true, :value (get {\"sete\" 7, \"dois\" 2, \"nove\" 9, \"uma\" 1, \"treze\" 13, \"seis\" 6, \"onze\" 11, \"quatro\" 4, \"catorze\" 14, \"cinco\" 5, \"zero\" 0, \"duas\" 2, \"um\" 1, \"três\" 3, \"tres\" 3, \"quinze\" 15, \"doze\" 12, \"dez\" 10, \"quatorze\" 14, \"oito\" 8} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)d[úu]zias?\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "number dozen", :pattern "[(integer 1 10) (dim :number (fn* [p1__3548#] (:grouping p1__3548#)))]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number (20..90)", :pattern "#\"(?i)(vinte|trinta|quarenta|cin(q[uü]|co)enta|sessenta|setenta|oitenta|noventa)\"", :production "{:dim :number, :integer true, :value (get {\"vinte\" 20, \"oitenta\" 80, \"sessenta\" 60, \"cinqüenta\" 50, \"cincoenta\" 50, \"trinta\" 30, \"setenta\" 70, \"noventa\" 90, \"quarenta\" 40, \"cinquenta\" 50} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number (16..19)", :pattern "[(integer 10 10) #\"(?i)e\" (integer 6 9)]", :production "{:dim :number, :integer true, :value (+ 10 (:value %3))}"}
 #clj-duckling.engine/rule {:name "number (21..29 31..39 41..49 51..59 61..69 71..79 81..89 91..99)", :pattern "[(integer 20 90 (fn* [p1__3549#] (#{70 20 60 50 40 90 30 80} (:value p1__3549#)))) #\"(?i)e\" (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "number (16..19)", :pattern "#\"(?i)(dez[ea]sseis|dez[ea]ssete|dezoito|dez[ea]nove)\"", :production "{:dim :number, :integer true, :value (get {\"dezesseis\" 16, \"dezasseis\" 16, \"dezessete\" 17, \"dezassete\" 17, \"dezoito\" 18, \"dezenove\" 19, \"dezanove\" 19} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number 100..1000 ", :pattern "#\"(?i)(ce(m|to)|duzentos|trezentos|quatrocentos|quinhentos|seiscentos|setecentos|oitocentos|novecentos|mil)\"", :production "{:dim :number, :integer true, :value (get {\"cento\" 100, \"quinhentos\" 500, \"mil\" 1000, \"trezentos\" 300, \"novecentos\" 900, \"seiscentos\" 600, \"oitocentos\" 800, \"duzentos\" 200, \"setecentos\" 700, \"quatrocentos\" 400, \"cem\" 100} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "numbers 200..999", :pattern "[(integer 2 9) (integer 100 100) (integer 0 99)]", :production "{:dim :number, :integer true, :value (+ (* (:value %1) (:value %2)) (:value %3))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator .", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (parse-number-fr (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3550#] (not (:number-prefixed p1__3550#)))) #\"(?i)ponto\" (dim :number (fn* [p1__3551#] (not (:number-suffixed p1__3551#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") parse-number-fr)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|menos\" (dim :number (fn* [p1__3552#] (not (:number-prefixed p1__3552#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3553#] (not (:number-suffixed p1__3553#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (primeiro..10)", :pattern "#\"(?i)((primeir|segund|quart|quint|sext|s[eé]tim|oitav|non|d[eé]cim)(os?|as?))\"", :production "{:dim :ordinal, :value (get {\"décimos\" 10, \"quinto\" 5, \"quinta\" 5, \"segundo\" 2, \"segunda\" 2, \"decimo\" 10, \"decimos\" 10, \"primeira\" 1, \"setimas\" 7, \"décimo\" 10, \"quintas\" 5, \"quartos\" 4, \"primeiros\" 1, \"sextos\" 6, \"primeiras\" 1, \"oitavas\" 8, \"terceiros\" 3, \"sétima\" 7, \"terceiro\" 3, \"nonos\" 9, \"oitava\" 8, \"segundas\" 2, \"decimas\" 10, \"décima\" 10, \"sexto\" 6, \"decima\" 10, \"oitavo\" 8, \"sexta\" 6, \"nona\" 9, \"sextas\" 6, \"nono\" 9, \"setimo\" 7, \"setimos\" 7, \"primeiro\" 1, \"quarto\" 4, \"terceiras\" 3, \"quarta\" 4, \"terceira\" 3, \"setima\" 7, \"oitavos\" 8, \"segundos\" 2, \"nonas\" 9, \"décimas\" 10, \"quartas\" 4, \"sétimos\" 7, \"quintos\" 5, \"sétimo\" 7, \"sétimas\" 7} (-> %1 :groups first clojure.string/lower-case))}"}]