[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3568#] (> (:grain p1__3568#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "intersect (cu și)", :pattern "[(dim :number :grain (fn* [p1__3569#] (> (:grain p1__3569#) 1))) #\"(?i)(si|și)\" (dim :number)]", :production "(compose-numbers %1 %3)"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(unsprezece|doisprezece|treisprezece|paisprezece|cincisprezece|[sș]aispreece|[sș]aptesprezece|optsprezece|nou[aă]sprezece|un[sș]pe|doi[sș]pe|trei[sș]pe|pai[sș]pe|cin[sș]pe|[sș]ai[sș]pe|[sș]apti[sș]pe|opti[sș]pe|nou[aă][sș]pe|zero|nimic|nici(.+)|una|unu(l?)|doi|dou[aă]|trei|patru|cinci|[sș]ase|[sș]apte|opt|nou[aă]|zec[ei]|[iî]nt[aâ]i|un|o)\"", :production "{:dim :number, :integer true, :value (get {\"unșpe\" 11, \"un\" 1, \"nouasprezece\" 19, \"șaptesprezece\" 17, \"paisprezece\" 14, \"unspe\" 11, \"doispe\" 12, \"nici o\" 0, \"nimic\" 0, \"optispe\" 18, \"nouăsprezece\" 19, \"șaișpe\" 16, \"opt\" 8, \"șaptișpe\" 17, \"unsprezece\" 11, \"cinspe\" 15, \"treișpe\" 13, \"una\" 1, \"treisprezece\" 13, \"șase\" 6, \"doi\" 2, \"saispe\" 16, \"saisprezece\" 16, \"paișpe\" 14, \"trei\" 3, \"doisprezece\" 12, \"patru\" 4, \"zero\" 0, \"nicio\" 0, \"unu\" 1, \"cinci\" 5, \"unul\" 1, \"cincisprezece\" 15, \"nici una\" 0, \"zeci\" 10, \"noua\" 9, \"sapte\" 7, \"nouaspe\" 19, \"șapte\" 7, \"optișpe\" 18, \"doua\" 2, \"treispe\" 13, \"două\" 2, \"saptispe\" 17, \"șaisprezece\" 16, \"nouășpe\" 19, \"saptesprezece\" 17, \"cinșpe\" 15, \"intai\" 1, \"zece\" 10, \"paispe\" 14, \"sase\" 6, \"doișpe\" 12, \"nici unu\" 0, \"optsprezece\" 18, \"nici unul\" 0, \"o\" 1, \"nouă\" 9, \"întâi\" 1} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "zeci (cu spatiu)", :pattern "#\"(?i)zeci\"", :production "{:dim :number, :integer true, :value 10, :grain 2}"}
 #clj-duckling.engine/rule {:name "suta", :pattern "#\"(?i)sut[aăe]?\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "mie", :pattern "#\"(?i)mi[ei]?\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "milion", :pattern "#\"(?i)milio(n|ane)?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "miliard", :pattern "#\"(?i)miliar(de|d)?\"", :production "{:dim :number, :integer true, :value 1000000000, :grain 9}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,10})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(dou[aă].?zeci|trei.?zeci|patru.?zeci|cinci.?zeci|[sș]ai.?zeci|[sș]apte.?zeci|opt.?zeci|nou[aă].?zeci)\"", :production "{:dim :number, :integer true, :value (get {\"trei zeci\" 30, \"patru zeci\" 40, \"șapte zeci\" 70, \"douazeci\" 20, \"nouăzeci\" 90, \"doua zeci\" 20, \"șaptezeci\" 70, \"cinci zeci\" 50, \"treizeci\" 30, \"sapte zeci\" 70, \"două zeci\" 20, \"șaizeci\" 60, \"saptezeci\" 70, \"patruzeci\" 40, \"douăzeci\" 20, \"saizeci\" 60, \"opt zeci\" 80, \"șai zeci\" 60, \"nouazeci\" 90, \"sai zeci\" 60, \"cincizeci\" 50, \"noua zeci\" 90, \"optzeci\" 80, \"nouă zeci\" 90} (-> %1 :groups first clojure.string/lower-case)), :grain 2}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3570#] (#{70 20 60 50 40 90 30 80} (:value p1__3570#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number zeci (cu spatiu)", :pattern "[(integer 1 9) #\"(?i).?zeci\"]", :production "{:dim :number, :integer true, :value (* (:value %1) 10), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number sute", :pattern "[(integer 1 99) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number mii", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number milioane", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number miliarde", :pattern "[(integer 1 99) (integer 1000000000 1000000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "integer cu separator de mii dot", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \".\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") (clojure.string/replace #\",\" \".\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with - or minus", :pattern "[#\"(?i)-|minus\\s?\" (dim :number (fn* [p1__3571#] (not (:number-prefixed p1__3571#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes with (negativ)", :pattern "[(dim :number (fn* [p1__3572#] (not (:number-prefixed p1__3572#)))) #\"(?i)(negativ|neg)\"]", :production "(let [multiplier -1 value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (primul..9lea)", :pattern "#\"(?i)(prim(ul|a)|(al|a) (doi.*lea|doua)|(al|a) trei.*(lea|a)|(al|a) patr.*(ulea|a)|(al|a) cinci.*(lea|a)|(al|a) [sș]ase.*(lea|a)|(al|a) [sș]apte.*(lea|a)|(al|a) opt.*(ulea|a)|(al|a) nou.*(ălea|a))\"", :production "{:dim :ordinal, :value (get {\"al sapte-lea\" 7, \"al cinci-lea\" 5, \"al șapte lea\" 7, \"al doi-lea\" 2, \"al cincilea\" 5, \"a șaptea\" 7, \"a opta\" 8, \"a șase a\" 6, \"al șase lea\" 6, \"a cinci a\" 5, \"al sase lea\" 6, \"al saselea\" 6, \"al patru-lea\" 4, \"a doua\" 2, \"al sase-lea\" 6, \"al sapte lea\" 7, \"a cincia\" 5, \"al șsaptelea\" 7, \"a opt a\" 8, \"al treilea\" 3, \"a noua\" 9, \"al șase-lea\" 6, \"al doilea\" 2, \"al opt lea\" 8, \"al opt-lea\" 8, \"al nouă lea\" 9, \"a saptea\" 7, \"al cinci lea\" 5, \"a șapte a\" 7, \"a sase a\" 6, \"al trei lea\" 3, \"al trei-lea\" 3, \"a trei a\" 3, \"a treia\" 3, \"al nouă-lea\" 9, \"al șaselea\" 6, \"al doi lea\" 2, \"prima\" 1, \"al patru lea\" 4, \"al noua-lea\" 9, \"al ;apte-lea\" 7, \"al aptulea\" 8, \"a sapte a\" 7, \"al saptelea\" 7, \"al nouălea\" 9, \"a sasea\" 6, \"a patra\" 4, \"al patrulea\" 4, \"primul\" 1, \"al noua lea\" 9, \"al noualea\" 9, \"a șasea\" 6} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "[#\"(?i)(al|a)\" #\"(0*(\\d+))\" #\"(?i)(-lea|lea|-a|a)\"]", :production "{:dim :ordinal, :value (read-string (first (:groups %2)))}"}
 #clj-duckling.engine/rule {:name "special composition for missing hundreds like in one twenty two", :pattern "[(integer 1 9) (integer 10 99)]", :production "{:dim :number, :integer true, :value (+ (* (:value %1) 100) (:value %2)), :grain 1}"}]