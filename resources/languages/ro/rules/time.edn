[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :time (fn* [p1__3549#] (not (:latent p1__3549#)))) (dim :time (fn* [p1__3550#] (not (:latent p1__3550#))))]", :production "(intersect %1 %2)"}
 #clj-duckling.engine/rule {:name "intersect by \",\"", :pattern "[(dim :time (fn* [p1__3551#] (not (:latent p1__3551#)))) (dim :time (fn* [p1__3552#] (not (:latent p1__3552#))))]", :production "(intersect %1 %2)"}
 #clj-duckling.engine/rule {:name "pe <date>", :pattern "[#\"(?i)pe\" (dim :time)]", :production "%2"}
 #clj-duckling.engine/rule {:name "intr-o <named-day>", :pattern "[#\"(?i)([iî]n(tr)?(-o|o)?)\" {:form :day-of-week}]", :production "%2"}
 #clj-duckling.engine/rule {:name "in <named-month>", :pattern "[#\"(?i)[iî]n\" {:form :month}]", :production "%2"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)lun(ea|i)|lun\"", :production "(day-of-week 1)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)mar[tț](ea|i)|mar\"", :production "(day-of-week 2)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)miercur(ea|i)|mie\"", :production "(day-of-week 3)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)jo(ia|i)|jo\"", :production "(day-of-week 4)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)viner(ea|i)|vin\"", :production "(day-of-week 5)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)s[aâ]mb[aă]t[aă]|s[aâ]m\"", :production "(day-of-week 6)"}
 #clj-duckling.engine/rule {:name "named-day", :pattern "#\"(?i)duminic[aă]|dum\"", :production "(day-of-week 7)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)ianuarie|ian\"", :production "(month 1)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)februarie|feb\"", :production "(month 2)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)martie|mar\"", :production "(month 3)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)aprilie|apr\"", :production "(month 4)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)mai\"", :production "(month 5)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)iunie|iun\"", :production "(month 6)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)iulie|iul\"", :production "(month 7)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)august|aug\"", :production "(month 8)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)septembrie|sept\"", :production "(month 9)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)octombrie|oct\"", :production "(month 10)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)noiembrie|noi\"", :production "(month 11)"}
 #clj-duckling.engine/rule {:name "named-month", :pattern "#\"(?i)decembrie|dec\"", :production "(month 12)"}
 #clj-duckling.engine/rule {:name "craciun", :pattern "#\"(?i)(ziua de )? cr[aă]ciun\"", :production "(month-day 12 25)"}
 #clj-duckling.engine/rule {:name "christmas eve", :pattern "#\"(?i)(ajun(ul)? )? (de )? cr[aă]ciun\"", :production "(month-day 12 24)"}
 #clj-duckling.engine/rule {:name "new year's eve", :pattern "#\"(?i)(ajun(ul)? )? (de )? an(ul)? nou\"", :production "(month-day 12 31)"}
 #clj-duckling.engine/rule {:name "new year's day", :pattern "#\"(?i)(siua de )? an(ul)? nou\"", :production "(month-day 1 1)"}
 #clj-duckling.engine/rule {:name "valentine's day", :pattern "#\"(?i)sf\\.?([aâ]ntul)? Valentin\"", :production "(month-day 2 14)"}
 #clj-duckling.engine/rule {:name "Mother's Day", :pattern "#\"(?i)ziua (mamei|memeii)\"", :production "(intersect (day-of-week 7) (month 5) (cycle-nth-after :week 1 (month-day 5 1)))"}
 #clj-duckling.engine/rule {:name "halloween day", :pattern "#\"(?i)hall?owe?en\"", :production "(month-day 10 31)"}
 #clj-duckling.engine/rule {:name "black friday", :pattern "#\"(?i)black frid?day\"", :production "(intersect (day-of-week 5) (month 11) (cycle-nth-after :week 4 (month-day 11 1)))"}
 #clj-duckling.engine/rule {:name "absorption of , after named day", :pattern "[{:form :day-of-week} #\",\"]", :production "%1"}
 #clj-duckling.engine/rule {:name "acum", :pattern "#\"(?i)(chiar)? ?acum|imediat\"", :production "(cycle-nth :second 0)"}
 #clj-duckling.engine/rule {:name "azi", :pattern "#\"(?i)azi|ast[aă]zi\"", :production "(cycle-nth :day 0)"}
 #clj-duckling.engine/rule {:name "maine", :pattern "#\"(?i)m[aâ]ine\"", :production "(cycle-nth :day 1)"}
 #clj-duckling.engine/rule {:name "ieri", :pattern "#\"(?i)ieri\"", :production "(cycle-nth :day -1)"}
 #clj-duckling.engine/rule {:name "EOM|End of month", :pattern "#\"(?i)sf[aâ]r[sș]itul lunii\"", :production "(cycle-nth :month 1)"}
 #clj-duckling.engine/rule {:name "EOY|End of year", :pattern "#\"(?i)sf[aâ]r[sș]itul anului\"", :production "(cycle-nth :year 1)"}
 #clj-duckling.engine/rule {:name "this|next <day-of-week>", :pattern "[{:form :day-of-week} #\"(?i)aceasta|[aă]sta|urm[aă]toare\"]", :production "(pred-nth-not-immediate %1 0)"}
 #clj-duckling.engine/rule {:name "<time> (aceasta|acesta|[aă]sta)", :pattern "[(dim :time) #\"(?i)aceasta|[aă]sta|urm[aă]toare\"]", :production "(pred-nth %1 0)"}
 #clj-duckling.engine/rule {:name "<time> urm[aă]to(are|r)", :pattern "[#\"(?i)next\" (dim :time (fn* [p1__3553#] (not (:latent p1__3553#))))]", :production "(pred-nth-not-immediate %2 0)"}
 #clj-duckling.engine/rule {:name "<time> trecut[aă]?", :pattern "[(dim :time) #\"(?i)(trecut[aă]?)\"]", :production "(pred-nth %2 -1)"}
 #clj-duckling.engine/rule {:name "last <day-of-week> of <time>", :pattern "[#\"(?i)ultima\" {:form :day-of-week} #\"(?i)din\" (dim :time)]", :production "(pred-last-of %2 %4)"}
 #clj-duckling.engine/rule {:name "last <cycle> of <time>", :pattern "[#\"(?i)ultim(ul|a)\" (dim :cycle) #\"(?i)din\" (dim :time)]", :production "(cycle-last-of %2 %4)"}
 #clj-duckling.engine/rule {:name "nth <time> of <time>", :pattern "[(dim :ordinal) (dim :time) #\"(?i)din\" (dim :time)]", :production "(pred-nth (intersect %4 %2) (dec (:value %1)))"}
 #clj-duckling.engine/rule {:name "nth <time> after <time>", :pattern "[(dim :ordinal) (dim :time) #\"(?i)dup[aă]\" (dim :time)]", :production "(pred-nth-after %2 %4 (dec (:value %1)))"}
 #clj-duckling.engine/rule {:name "year", :pattern "(integer 1000 2100)", :production "(year (:value %1))"}
 #clj-duckling.engine/rule {:name "year (latent)", :pattern "(integer -10000 999)", :production "(assoc (year (:value %1)) :latent true)"}
 #clj-duckling.engine/rule {:name "year (latent)", :pattern "(integer 2101 10000)", :production "(assoc (year (:value %1)) :latent true)"}
 #clj-duckling.engine/rule {:name "the <day-of-month> (number)", :pattern "[#\"pe\" (dim :number (fn* [p1__3554#] (<= 1 (:value p1__3554#) 31)))]", :production "(day-of-month (:value %2))"}
 #clj-duckling.engine/rule {:name "<day-of-month> (number)", :pattern "[(integer 1 31)]", :production "(assoc (day-of-month (:value %1)) :latent true)"}
 #clj-duckling.engine/rule {:name "pe <day-of-month> (non ordinal)", :pattern "[#\"pe\" (integer 1 31)]", :production "(assoc (day-of-month (:value %2)) :latent true)"}
 #clj-duckling.engine/rule {:name "<named-day> <day-of-month> (number)", :pattern "[{:form :day-of-week} (dim :number (fn* [p1__3555#] (<= 1 (:value p1__3555#) 31)))]", :production "(intersect %1 (day-of-month (:value %2)))"}
 #clj-duckling.engine/rule {:name "<named-day> pe <day-of-month> (number)", :pattern "[{:form :day-of-week} #\"pe\" (dim :number (fn* [p1__3556#] (<= 1 (:value p1__3556#) 31)))]", :production "(intersect %1 (day-of-month (:value %3)))"}
 #clj-duckling.engine/rule {:name "<named-month> <day-of-month> (non ordinal)", :pattern "[{:form :month} (integer 1 31)]", :production "(intersect %1 (day-of-month (:value %2)))"}
 #clj-duckling.engine/rule {:name "<day-of-month> (number) of <named-month>", :pattern "[(dim :number (fn* [p1__3557#] (<= 1 (:value p1__3557#) 31))) #\"(?i)din\" {:form :month}]", :production "(intersect %3 (day-of-month (:value %1)))"}
 #clj-duckling.engine/rule {:name "<day-of-month> (non ordinal) of <named-month>", :pattern "[(integer 1 31) #\"(?i)din\" {:form :month}]", :production "(intersect %3 (day-of-month (:value %1)))"}
 #clj-duckling.engine/rule {:name "<day-of-month> (non ordinal) <named-month>", :pattern "[(integer 1 31) {:form :month}]", :production "(intersect %2 (day-of-month (:value %1)))"}
 #clj-duckling.engine/rule {:name "<day-of-month>(number) <named-month>", :pattern "[(dim :number (fn* [p1__3558#] (<= 1 (:value p1__3558#) 31))) {:form :month}]", :production "(intersect %2 (day-of-month (:value %1)))"}
 #clj-duckling.engine/rule {:name "<day-of-month>(number) <named-month> year", :pattern "[(dim :number (fn* [p1__3559#] (<= 1 (:value p1__3559#) 31))) {:form :month} #\"(\\d{2,4})\"]", :production "(intersect %2 (day-of-month (:value %1)) (year (Integer/parseInt (first (:groups %3)))))"}
 #clj-duckling.engine/rule {:name "time-of-day (latent)", :pattern "(integer 0 23)", :production "(assoc (hour (:value %1) true) :latent true)"}
 #clj-duckling.engine/rule {:name "la <time-of-day>", :pattern "[#\"(?i)la|@ (ora)?\" {:form :time-of-day}]", :production "(dissoc %2 :latent)"}
 #clj-duckling.engine/rule {:name "hh:mm", :pattern "#\"(?i)((?:[01]?\\d)|(?:2[0-3]))[:.]([0-5]\\d)\"", :production "(hour-minute (Integer/parseInt (first (:groups %1))) (Integer/parseInt (second (:groups %1))) true)"}
 #clj-duckling.engine/rule {:name "hh:mm:ss", :pattern "#\"(?i)((?:[01]?\\d)|(?:2[0-3]))[:.]([0-5]\\d)[:.]([0-5]\\d)\"", :production "(hour-minute-second (Integer/parseInt (first (:groups %1))) (Integer/parseInt (second (:groups %1))) (Integer/parseInt (second (next (:groups %1)))) true)"}
 #clj-duckling.engine/rule {:name "hhmm (military) am|pm", :pattern "[#\"(?i)((?:1[012]|0?\\d))([0-5]\\d)\" #\"(?i)([ap])\\.?m?\\.?\"]", :production "(let [[p meridiem] (if (= \"a\" (-> %2 :groups first clojure.string/lower-case)) [[(hour 0) (hour 12) false] :am] [[(hour 12) (hour 0) false] :pm])] (-> (intersect (hour-minute (Integer/parseInt (first (:groups %1))) (Integer/parseInt (second (:groups %1))) true) (apply interval p)) (assoc :form :time-of-day)))"}
 #clj-duckling.engine/rule {:name "<time-of-day> am|pm", :pattern "[{:form :time-of-day} #\"(?i)(in the )?([ap])(\\s|\\.)?m?\\.?\"]", :production "(let [[p meridiem] (if (= \"a\" (-> %2 :groups second clojure.string/lower-case)) [[(hour 0) (hour 12) false] :am] [[(hour 12) (hour 0) false] :pm])] (-> (intersect %1 (apply interval p)) (assoc :form :time-of-day)))"}
 #clj-duckling.engine/rule {:name "noon", :pattern "#\"(?i)noon\"", :production "(hour 12 false)"}
 #clj-duckling.engine/rule {:name "sfert (relative minutes)", :pattern "#\"(?i)(un)? ?sfert\"", :production "{:relative-minutes 15}"}
 #clj-duckling.engine/rule {:name "jumatate (relative minutes)", :pattern "#\"jum[aă]tate|jumate\"", :production "{:relative-minutes 30}"}
 #clj-duckling.engine/rule {:name "number (as relative minutes)", :pattern "(integer 1 59)", :production "{:relative-minutes (:value %1)}"}
 #clj-duckling.engine/rule {:name "<hour-of-day> <integer> (as relative minutes)", :pattern "[(dim :time :full-hour) (fn* [p1__3560#] (:relative-minutes p1__3560#))]", :production "(hour-relativemin (:full-hour %1) (:relative-minutes %2) true)"}
 #clj-duckling.engine/rule {:name "dd/mm/yyyy", :pattern "#\"(3[01]|[12]\\d|0?[1-9])[-/](0?[1-9]|1[0-2])[/-](\\d{2,4})\"", :production "(parse-dmy (second (:groups %1)) (first (:groups %1)) (nth (:groups %1) 2) true)"}
 #clj-duckling.engine/rule {:name "mm/dd/yyyy", :pattern "#\"(0?[1-9]|1[0-2])[/-](3[01]|[12]\\d|0?[1-9])[-/](\\d{2,4})\"", :production "(parse-dmy (second (:groups %1)) (first (:groups %1)) (nth (:groups %1) 2) true)"}
 #clj-duckling.engine/rule {:name "yyyy-mm-dd", :pattern "#\"(\\d{2,4})-(0?[1-9]|1[0-2])-(3[01]|[12]\\d|0?[1-9])\"", :production "(parse-dmy (nth (:groups %1) 2) (second (:groups %1)) (first (:groups %1)) true)"}
 #clj-duckling.engine/rule {:name "mm/dd", :pattern "#\"(0?[1-9]|1[0-2])/(3[01]|[12]\\d|0?[1-9])\"", :production "(parse-dmy (second (:groups %1)) (first (:groups %1)) nil true)"}
 #clj-duckling.engine/rule {:name "dd/mm", :pattern "#\"(3[01]|[12]\\d|0?[1-9])/(0?[1-9]|1[0-2])\"", :production "(parse-dmy (second (:groups %1)) (first (:groups %1)) nil true)"}
 #clj-duckling.engine/rule {:name "diminea[tț][aă]", :pattern "[#\"(?i)morning\"]", :production "(assoc (interval (hour 4 false) (hour 12 false) false) :form :part-of-day :latent true)"}
 #clj-duckling.engine/rule {:name "dupamiaza", :pattern "[#\"(?i)dupamiaz[aă]|dup[aă] amiaz[aă]\"]", :production "(assoc (interval (hour 12 false) (hour 19 false) false) :form :part-of-day :latent true)"}
 #clj-duckling.engine/rule {:name "sear[aă] noapte", :pattern "[#\"(?i)sear[aă]|noapte\"]", :production "(assoc (interval (hour 18 false) (hour 0 false) false) :form :part-of-day :latent true)"}
 #clj-duckling.engine/rule {:name "<part-of-day> asta", :pattern "[{:form :part-of-day} #\"(?i)asta\"]", :production "(assoc (intersect (cycle-nth :day 0) %1) :form :part-of-day)"}
 #clj-duckling.engine/rule {:name "diseara", :pattern "#\"(?i)disear[aă]|([iî]n aceas[aă])? sear[aă]\"", :production "(assoc (intersect (cycle-nth :day 0) (interval (hour 18 false) (hour 0 false) false)) :form :part-of-day)"}
 #clj-duckling.engine/rule {:name "<time> <part-of-day>", :pattern "[(dim :time) {:form :part-of-day}]", :production "(intersect %2 %1)"}
 #clj-duckling.engine/rule {:name "week-end", :pattern "#\"(?i)(week(\\s|-)?end|wkend)\"", :production "(interval (intersect (day-of-week 5) (hour 18 false)) (intersect (day-of-week 1) (hour 0 false)) false)"}
 #clj-duckling.engine/rule {:name "sezon anotimp", :pattern "#\"(?i)var[aă]\"", :production "(interval (month-day 6 21) (month-day 9 23) false)"}
 #clj-duckling.engine/rule {:name "season", :pattern "#\"(?i)toamn[aă]\"", :production "(interval (month-day 9 23) (month-day 12 21) false)"}
 #clj-duckling.engine/rule {:name "season", :pattern "#\"(?i)iarn[aă]\"", :production "(interval (month-day 12 21) (month-day 3 20) false)"}
 #clj-duckling.engine/rule {:name "season", :pattern "#\"(?i)primavar[aă]\"", :production "(interval (month-day 3 20) (month-day 6 21) false)"}
 #clj-duckling.engine/rule {:name "fus orar", :pattern "#\"(?i)\\b(YEKT|YEKST|YAPT|YAKT|YAKST|WT|WST|WITA|WIT|WIB|WGT|WGST|WFT|WEZ|WET|WESZ|WEST|WAT|WAST|VUT|VLAT|VLAST|VET|UZT|UYT|UYST|UTC|ULAT|TVT|TMT|TLT|TKT|TJT|TFT|TAHT|SST|SRT|SGT|SCT|SBT|SAST|SAMT|RET|PYT|PYST|PWT|PT|PST|PONT|PMST|PMDT|PKT|PHT|PHOT|PGT|PETT|PETST|PET|PDT|OMST|OMSST|NZST|NZDT|NUT|NST|NPT|NOVT|NOVST|NFT|NDT|NCT|MYT|MVT|MUT|MST|MSK|MSD|MMT|MHT|MEZ|MESZ|MDT|MAWT|MART|MAGT|MAGST|LINT|LHST|LHDT|KUYT|KST|KRAT|KRAST|KGT|JST|IST|IRST|IRKT|IRKST|IRDT|IOT|IDT|ICT|HOVT|HNY|HNT|HNR|HNP|HNE|HNC|HNA|HLV|HKT|HAY|HAT|HAST|HAR|HAP|HAE|HADT|HAC|HAA|GYT|GST|GMT|GILT|GFT|GET|GAMT|GALT|FNT|FKT|FKST|FJT|FJST|ET|EST|EGT|EGST|EET|EEST|EDT|ECT|EAT|EAST|EASST|DAVT|ChST|CXT|CVT|CST|COT|CLT|CLST|CKT|CHAST|CHADT|CET|CEST|CDT|CCT|CAT|CAST|BTT|BST|BRT|BRST|BOT|BNT|AZT|AZST|AZOT|AZOST|AWST|AWDT|AST|ART|AQTT|ANAT|ANAST|AMT|AMST|ALMT|AKST|AKDT|AFT|AEST|AEDT|ADT|ACST|ACDT)\\b\"", :production "{:dim :timezone, :value (-> %1 :groups first clojure.string/upper-case)}"}
 #clj-duckling.engine/rule {:name "<time> timezone", :pattern "[(dim :time) (dim :timezone)]", :production "(set-timezone %1 (:value %2))"}
 #clj-duckling.engine/rule {:name "<time-of-day> approximately", :pattern "[{:form :time-of-day} #\"(?i)(-?ish|approximately)\"]", :production "(-> %1 (dissoc :latent) (merge {:precision \"approximate\"}))"}
 #clj-duckling.engine/rule {:name "<time-of-day> fix", :pattern "[{:form :time-of-day} #\"(?i)(fix|exact)\"]", :production "(-> %1 (dissoc :latent) (merge {:precision \"exact\"}))"}
 #clj-duckling.engine/rule {:name "about <time-of-day>", :pattern "[#\"(?i)(cam|aproximativ|[iî]n jur de)\" {:form :time-of-day}]", :production "(-> %2 (dissoc :latent) (merge {:precision \"approximate\"}))"}
 #clj-duckling.engine/rule {:name "<month> dd-dd (interval)", :pattern "[{:form :month} #\"(3[01]|[12]\\d|0?[1-9])\" #\"\\-|to|th?ru|through|(un)?til(l)?\" #\"(3[01]|[12]\\d|0?[1-9])\"]", :production "(interval (intersect %1 (day-of-month (Integer/parseInt (-> %2 :groups first)))) (intersect %1 (day-of-month (Integer/parseInt (-> %4 :groups first)))) true)"}
 #clj-duckling.engine/rule {:name "<datetime> - <datetime> (interval)", :pattern "[(dim :time (fn* [p1__3561#] (not (:latent p1__3561#)))) #\"\\-|to|th?ru|through|(un)?til(l)?\" (dim :time (fn* [p1__3562#] (not (:latent p1__3562#))))]", :production "(interval %1 %3 true)"}
 #clj-duckling.engine/rule {:name "from <datetime> - <datetime> (interval)", :pattern "[#\"(?i)from\" (dim :time) #\"\\-|to|th?ru|through|(un)?til(l)?\" (dim :time)]", :production "(interval %2 %4 true)"}
 #clj-duckling.engine/rule {:name "intre <datetime> si <datetime> (interval)", :pattern "[#\"(?i)[iî]nre\" (dim :time) #\"[sș]i\" (dim :time)]", :production "(interval %2 %4 true)"}
 #clj-duckling.engine/rule {:name "<time-of-day> - <time-of-day> (interval)", :pattern "[(fn* [p1__3563#] (and (= :time-of-day (:form p1__3563#)) (not (:latent p1__3563#)))) #\"\\-|:|to|th?ru|through|(un)?til(l)?\" {:form :time-of-day}]", :production "(interval %1 %3 true)"}
 #clj-duckling.engine/rule {:name "from <time-of-day> - <time-of-day> (interval)", :pattern "[#\"(?i)(dup[aă]|[iî]ncep[aâ]nd cu)\" {:form :time-of-day} #\"(dar |[sș]i )?([iî]nainte|p[aâ]n[aă] la (de)?)\" {:form :time-of-day}]", :production "(interval %2 %4 true)"}
 #clj-duckling.engine/rule {:name "between <time-of-day> and <time-of-day> (interval)", :pattern "[#\"(?i)[iî]ntre\" {:form :time-of-day} #\"[sș]i\" {:form :time-of-day}]", :production "(interval %2 %4 true)"}
 #clj-duckling.engine/rule {:name "[iî]n <duration>", :pattern "[#\"(?i)[iî]n\" (dim :duration)]", :production "(interval (cycle-nth :second 0) (in-duration (:value %2)) false)"}
 #clj-duckling.engine/rule {:name "by <time>", :pattern "[#\"(?i)p[aâ]n[aă] (la|[iî]n)\" (dim :time)]", :production "(interval (cycle-nth :second 0) %2 false)"}
 #clj-duckling.engine/rule {:name "by the end of <time>", :pattern "[#\"(?i)p[aî]n[aă] ([iî]n|la)\" (dim :time)]", :production "(interval (cycle-nth :second 0) %2 true)"}
 #clj-duckling.engine/rule {:name "until <time-of-day>", :pattern "[#\"(?i)p[aî]n[aă] ([iî]n|la)\" (dim :time)]", :production "(merge %2 {:direction :before})"}
 #clj-duckling.engine/rule {:name "after <time-of-day>", :pattern "[#\"(?i)dup[aă]\" (dim :time)]", :production "(merge %2 {:direction :after})"}
 #clj-duckling.engine/rule {:name "since <time-of-day>", :pattern "[#\"(?i)de|din\" (dim :time)]", :production "(merge (pred-nth %2 -1) {:direction :after})"}]