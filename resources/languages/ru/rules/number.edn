[#clj-duckling.engine/rule {:name "integer 0", :pattern "#\"(?i)(ноль)\"", :production "{:dim :number, :integer true, :value 0}"}
 #clj-duckling.engine/rule {:name "integer 1", :pattern "#\"(?i)(один|одна|одну)\"", :production "{:dim :number, :integer true, :value 1}"}
 #clj-duckling.engine/rule {:name "integer 2", :pattern "#\"(?i)(два|две|двое|пара|пару|парочку|парочка)\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "integer (3..19)", :pattern "#\"(?i)(три|четырнадцать|четыре|пятнадцать|пять|шестнадцать|шесть|семнадцать|семь|восемнадцать|восемь|девятнадцать|девять|десять|одинадцать|двенадцать|тринадцать)\"", :production "{:dim :number, :integer true, :value (get {\"пятнадцать\" 15, \"десять\" 10, \"девятнадцать\" 19, \"восемнадцать\" 18, \"четырнадцать\" 14, \"шесть\" 6, \"восемь\" 8, \"пять\" 5, \"девять\" 9, \"двенадцать\" 12, \"шестнадцать\" 16, \"четыре\" 4, \"одинадцать\" 11, \"три\" 3, \"семь\" 7, \"тринадцать\" 13, \"семнадцать\" 17} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(двадцать|тридцать|сорок|пятьдесят|шестьдесят|семьдесят|восемьдесят|девяносто)\"", :production "{:dim :number, :integer true, :value (get {\"двадцать\" 20, \"тридцать\" 30, \"сорок\" 40, \"пятьдесят\" 50, \"шестьдесят\" 60, \"семьдесят\" 70, \"восемьдесят\" 80, \"девяносто\" 90} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "integer (100..900)", :pattern "#\"(?i)(сто|двести|тристо|четыресто|пятьсот|шестьсот|семьсот|восемьсот|девятьсот)\"", :production "{:dim :number, :integer true, :value (get {\"девятьсот\" 900, \"восемьсот\" 800, \"двести\" 200, \"семьсот\" 700, \"сто\" 100, \"пятьсот\" 500, \"четыресто\" 400, \"шестьсот\" 600, \"тристо\" 300} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3545#] (#{70 20 60 50 40 90 30 80} (:value p1__3545#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer 101..999", :pattern "[(integer 100 900 (fn* [p1__3546#] (#{300 600 500 100 800 200 900 700 400} (:value p1__3546#)))) (integer 1 99)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3547#] (not (:number-prefixed p1__3547#)))) #\"(?i)точка\" (dim :number (fn* [p1__3548#] (not (:number-suffixed p1__3548#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, minus", :pattern "[#\"(?i)-|минус\\s?\" (dim :number (fn* [p1__3549#] (not (:number-prefixed p1__3549#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3550#] (not (:number-suffixed p1__3550#)))) #\"(?i)([кмг]|[КМГ])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"к\" 1000, \"м\" 1000000, \"г\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..19th)", :pattern "#\"(?i)(перв|втор|трет|четверт|пят|шест|седьм|восьм|девят|десят|одинадцат|двенадцат|тринадцат|четырнадцат|пятнадцат|шестнадцат|семнадцат|восемнадцат|девятнадцат|двадцат)(ый|ой|ий|ая|ое)\"", :production "{:dim :ordinal, :value (get {\"втор\" 2, \"четырнадцат\" 14, \"десят\" 10, \"трет\" 3, \"четверт\" 4, \"седьм\" 7, \"девят\" 9, \"двенадцат\" 12, \"пятнадцат\" 15, \"пят\" 5, \"восьм\" 8, \"одинадцат\" 11, \"семнадцат\" 17, \"тринадцат\" 13, \"двадцат\" 20, \"перв\" 1, \"девятнадцат\" 19, \"шестнадцат\" 16, \"шест\" 6, \"восемнадцат\" 18} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal 21..99", :pattern "[#\"(?i)(двадцать|тридцать|сорок|пятьдесят|шестьдесят|семьдесят|восемьдесят|девяносто)\" #\"(?i)(перв|втор|трет|четверт|пят|шест|седьм|восьм|девят)(ый|ой|ий|ая|ое)\"]", :production "{:dim :ordinal, :value (+ (get {\"двадцать\" 20, \"тридцать\" 30, \"сорок\" 40, \"пятьдесят\" 50, \"шестьдесят\" 60, \"семьдесят\" 70, \"восемьдесят\" 80, \"девяносто\" 90} (-> %1 :groups first clojure.string/lower-case)) (get {\"втор\" 2, \"трет\" 3, \"четверт\" 4, \"седьм\" 7, \"девят\" 9, \"пят\" 5, \"восьм\" 8, \"перв\" 1, \"шест\" 6} (-> %2 :groups first clojure.string/lower-case)))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)-?(?i)((ы|о|и)?й|ая|ое)\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]