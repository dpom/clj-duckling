[#clj-duckling.engine/rule {:name "number (0..19)", :pattern "#\"(?i)(zero|nulla|niente|uno|due|tredici|tre|quattro|cinque|sei|sette|otto|nove|dieci|undici|dodici|quattordici|quindici|sedici|diciassette|diciotto|diciannove|un)\"", :production "{:dim :number, :integer true, :value (get {\"diciassette\" 17, \"un\" 1, \"nove\" 9, \"diciotto\" 18, \"undici\" 11, \"sei\" 6, \"quattro\" 4, \"cinque\" 5, \"diciannove\" 19, \"uno\" 1, \"zero\" 0, \"quindici\" 15, \"dodici\" 12, \"quattordici\" 14, \"tre\" 3, \"sette\" 7, \"tredici\" 13, \"niente\" 0, \"due\" 2, \"sedici\" 16, \"otto\" 8, \"nulla\" 0, \"dieci\" 10} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number (20..90)", :pattern "#\"(?i)(venti|trenta|quaranta|cinquanta|sessanta|settanta|ottanta|novanta)\"", :production "{:dim :number, :integer true, :value (get {\"venti\" 20, \"trenta\" 30, \"quaranta\" 40, \"cinquanta\" 50, \"sessanta\" 60, \"settanta\" 70, \"ottanta\" 80, \"novanta\" 90} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number (21..29 31..39 41..49 51..59 61..69 71..79 81..89 91..99)", :pattern "[(integer 20 90 (fn* [p1__3551#] (#{70 20 60 50 40 90 30 80} (:value p1__3551#)))) #\"(?i)e\" (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "number (21..29 31..39 41..49 51..59 61..69 71..79 81..89 91..99)", :pattern "#\"(?i)((venti|trenta|quaranta|cinquanta|sessanta|settanta|ottanta|novanta)(due|tre|tré|quattro|cinque|sei|sette|nove))|((vent|trent|quarant|cinquant|sessant|settant|ottant|novant)(uno|otto))\"", :production "{:dim :number, :integer true, :value (get {\"quarantasei\" 46, \"sessantadue\" 62, \"ventisette\" 27, \"ottantacinque\" 85, \"ottantanove\" 89, \"trentuno\" 31, \"novantasette\" 97, \"settantotto\" 78, \"settantasette\" 77, \"quarantasette\" 47, \"trentacinque\" 35, \"trentatre\" 33, \"quarantatre\" 43, \"ventisei\" 26, \"novantasei\" 96, \"quarantatré\" 43, \"ottantuno\" 81, \"quarantanove\" 49, \"trentotto\" 38, \"cinquantotto\" 58, \"settantanove\" 79, \"ottantatré\" 83, \"cinquantacinque\" 55, \"quarantacinque\" 45, \"ottantatre\" 83, \"quarantadue\" 42, \"quarantaquattro\" 44, \"trentaquattro\" 34, \"ottantasette\" 87, \"sessantatré\" 63, \"ottantasei\" 86, \"trentadue\" 32, \"settantasei\" 76, \"ottantadue\" 82, \"novantatre\" 93, \"sessantanove\" 69, \"ottantotto\" 88, \"quarantuno\" 41, \"quarantotto\" 48, \"ottantaquattro\" 84, \"cinquantasette\" 57, \"ventitre\" 23, \"cinquantasei\" 56, \"trentanove\" 39, \"settantaquattro\" 74, \"novantotto\" 98, \"novantuno\" 91, \"ventidue\" 22, \"novantaquattro\" 94, \"sessantaquattro\" 64, \"cinquantatre\" 53, \"sessantuno\" 61, \"trentatré\" 33, \"settantadue\" 72, \"cinquantaquattro\" 54, \"cinquantanove\" 59, \"cinquantatré\" 53, \"ventinove\" 29, \"cinquantuno\" 51, \"settantatré\" 73, \"ventuno\" 21, \"trentasette\" 37, \"settantuno\" 71, \"settantatre\" 73, \"novantadue\" 92, \"sessantotto\" 68, \"ventiquattro\" 24, \"sessantacinque\" 65, \"ventotto\" 28, \"settantacinque\" 75, \"novantanove\" 99, \"novantacinque\" 95, \"sessantasei\" 66, \"ventitré\" 23, \"cinquantadue\" 52, \"novantatré\" 93, \"trentasei\" 36, \"sessantatre\" 63, \"venticinque\" 25, \"sessantasette\" 67} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number 100..1000 ", :pattern "#\"(?i)(due|tre|quattro|cinque|sei|sette|otto|nove)?cento|mil(a|le)\"", :production "{:dim :number, :integer true, :value (get {\"quattrocento\" 400, \"cento\" 100, \"seicento\" 600, \"trecento\" 300, \" mila\" 1000, \"settecento\" 700, \"duecento\" 200, \"ottocento\" 800, \"novecento\" 900, \"mille\" 1000, \"cinquecento\" 500} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "numbers 200..999", :pattern "[(integer 2 9) (integer 100 100) (integer 0 99)]", :production "{:dim :number, :integer true, :value (+ (* (:value %1) (:value %2)) (:value %3))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator .", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (parse-number-fr (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") parse-number-fr)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|meno|negativo\" (dim :number (fn* [p1__3552#] (not (:number-prefixed p1__3552#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3553#] (not (:number-suffixed p1__3553#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (primo..10)", :pattern "#\"(?i)((prim|second|terz|quart|quint|sest|settim|ottav|non|decim)(o|a|i|e))\"", :production "{:dim :ordinal, :value (get {\"quinto\" 5, \"quinta\" 5, \"none\" 9, \"sesti\" 6, \"decimo\" 10, \"terze\" 3, \"quinti\" 5, \"ottavo\" 8, \"seconda\" 2, \"settimi\" 7, \"noni\" 9, \"quinte\" 5, \"quarte\" 4, \"terzi\" 3, \"settima\" 7, \"secondi\" 2, \"seconde\" 2, \"seste\" 6, \"decima\" 10, \"ottava\" 8, \"primi\" 1, \"terzo\" 3, \"sesta\" 6, \"decime\" 10, \"nona\" 9, \"nono\" 9, \"ottavi\" 8, \"decimi\" 10, \"prima\" 1, \"quarto\" 4, \"settimo\" 7, \"secondo\" 2, \"quarta\" 4, \"ottave\" 8, \"quarti\" 4, \"primo\" 1, \"sesto\" 6, \"terza\" 3, \"settime\" 7, \"prime\" 1} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+) ?[ª°°]\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]