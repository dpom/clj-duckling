[#clj-duckling.engine/rule {:name "number (0..16)", :pattern "#\"(?i)(z[eé]ro|une?|deux|trois|quatre|cinq|six|sept|huit|neuf|dix|onze|douze|treize|quatorze|quinze|seize)\"", :production "{:dim :number, :integer true, :value (get {\"un\" 1, \"six\" 6, \"seize\" 16, \"dix\" 10, \"cinq\" 5, \"une\" 1, \"huit\" 8, \"deux\" 2, \"onze\" 11, \"zero\" 0, \"trois\" 3, \"neuf\" 9, \"quinze\" 15, \"douze\" 12, \"zéro\" 0, \"treize\" 13, \"quatre\" 4, \"quatorze\" 14, \"sept\" 7} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number (20..60)", :pattern "#\"(?i)(vingt|trente|quarante|cinquante|soixante)\"", :production "{:dim :number, :integer true, :value (get {\"vingt\" 20, \"trente\" 30, \"quarante\" 40, \"cinquante\" 50, \"soixante\" 60} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "number (17..19)", :pattern "[(integer 10 10) (integer 7 9)]", :production "{:dim :number, :integer true, :value (+ 10 (:value %2))}"}
 #clj-duckling.engine/rule {:name "number 80", :pattern "[#\"(?i)quatre\" #\"(?i)vingts?\"]", :production "{:dim :number, :integer true, :value 80}"}
 #clj-duckling.engine/rule {:name "numbers 21 31 41 51", :pattern "[(integer 20 50 (fn* [p1__3547#] (#{20 50 40 30} (:value p1__3547#)))) #\"(?i)et\" (integer 1 1)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "numbers 22..29 32..39 .. 52..59", :pattern "[(integer 20 50 (fn* [p1__3548#] (#{20 50 40 30} (:value p1__3548#)))) (integer 2 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "numbers 61 71", :pattern "[(integer 60 60) #\"(?i)-?et-?\" (integer 1 11 (fn* [p1__3549#] (#{1 11} (:value p1__3549#))))]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "numbers 81 91", :pattern "[(integer 80 80) (integer 1 11 (fn* [p1__3550#] (#{1 11} (:value p1__3550#))))]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "numbers 62..69 .. 92..99", :pattern "[(integer 60 80 (fn* [p1__3551#] (#{60 80} (:value p1__3551#)))) (integer 2 19)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator .", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (parse-number-fr (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") parse-number-fr)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|moins\" (dim :number (fn* [p1__3552#] (not (:number-prefixed p1__3552#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3553#] (not (:number-suffixed p1__3553#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (premier..seizieme)", :pattern "#\"(?i)(premi(ere?|ère)|(deux|trois|quatr|cinqu|six|sept|huit|neuv|dix|onz|douz|treiz|quatorz|quinz|seiz)i[eè]me)\"", :production "{:dim :ordinal, :value (get {\"huitième\" 8, \"quatrieme\" 4, \"onzième\" 11, \"seizieme\" 16, \"douzieme\" 12, \"seizième\" 16, \"cinquieme\" 5, \"quatorzième\" 14, \"treizieme\" 13, \"douzième\" 12, \"deuxième\" 2, \"troisième\" 3, \"neuvieme\" 9, \"première\" 1, \"quinzième\" 15, \"septieme\" 7, \"cinquième\" 5, \"troisieme\" 3, \"sixième\" 6, \"quatrième\" 4, \"treizième\" 13, \"sixieme\" 6, \"septième\" 7, \"dixième\" 10, \"neuvième\" 9, \"premiere\" 1, \"huitieme\" 8, \"quinzieme\" 15, \"quatorzieme\" 14, \"premier\" 1, \"deuxieme\" 2, \"dixieme\" 10, \"onzieme\" 11} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+) ?(ere?|ère|ème|eme)\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]