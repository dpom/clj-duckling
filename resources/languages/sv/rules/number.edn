[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3549#] (> (:grain p1__3549#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "intersect (with and)", :pattern "[(dim :number :grain (fn* [p1__3550#] (> (:grain p1__3550#) 1))) #\"(?i)och\" (dim :number)]", :production "(compose-numbers %1 %3)"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(inget|ingen|noll|en|ett|två|tretton|tre|fyra|femton|fem|sexton|sex|sjutton|sju|åtta|nio|tio|elva|tolv|fjorton|arton|nitton)\"", :production "{:dim :number, :integer true, :value (get {\"tolv\" 12, \"tio\" 10, \"sjutton\" 17, \"fjorton\" 14, \"en\" 1, \"fem\" 5, \"nitton\" 19, \"inget\" 0, \"arton\" 18, \"ingen\" 0, \"sju\" 7, \"femton\" 15, \"nio\" 9, \"tre\" 3, \"ett\" 1, \"elva\" 11, \"noll\" 0, \"åtta\" 8, \"två\" 2, \"sex\" 6, \"sexton\" 16, \"fyra\" 4, \"tretton\" 13} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)tio\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "single", :pattern "#\"(?i)enkel\"", :production "{:dim :number, :integer true, :value 1, :grain 1}"}
 #clj-duckling.engine/rule {:name "a pair", :pattern "#\"(?i)ett par\"", :production "{:dim :number, :integer true, :value 2, :grain 1}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)dussin\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "hundred", :pattern "#\"(?i)hundra?\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)tusen?\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)miljon(er)?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "couple", :pattern "#\"ett par\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "few", :pattern "#\"(några )?få\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(tjugo|trettio|fyrtio|femtio|sextio|sjuttio|åttio|nittio)\"", :production "{:dim :number, :integer true, :value (get {\"tjugo\" 20, \"trettio\" 30, \"fyrtio\" 40, \"femtio\" 50, \"sextio\" 60, \"sjuttio\" 70, \"åttio\" 80, \"nittio\" 90} (-> %1 :groups first .toLowerCase)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3551#] (#{70 20 60 50 40 90 30 80} (:value p1__3551#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator .", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "number hundreds", :pattern "[(integer 1 99) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \".\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3552#] (not (:number-prefixed p1__3552#)))) #\"(?i)komma\" (dim :number (fn* [p1__3553#] (not (:number-suffixed p1__3553#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+\\,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|minus\\s?|negativ\\s?\" (dim :number (fn* [p1__3554#] (not (:number-prefixed p1__3554#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3555#] (not (:number-suffixed p1__3555#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first .toLowerCase)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..31st)", :pattern "#\"(?i)(förste|första|andra|tredje|fjärde|femte|sjätte|sjunde|åttonde|nionde|tionde|ellevte|tolfte|trettonde|fjortonde|femtonde|sekstende|syttende|attende|nittende|tyvende|tjuende|enogtyvende|toogtyvende|treogtyvende|fireogtyvende|femogtyvende|seksogtyvende|syvogtyvende|åtteogtyvende|niogtyvende|enogtjuende|toogtjuende|treogtjuende|fireogtjuende|femogtjuende|seksogtjuende|syvogtjuende|åtteogtyvend|niogtjuende|tredefte|enogtredefte)\"", :production "{:dim :ordinal, :value (get {\"seksogtjuende\" 26, \"treogtyvende\" 23, \"åtteogtyvende\" 28, \"toogtyvende\" 22, \"tredje\" 3, \"femogtyvende\" 25, \"fireogtjuende\" 24, \"treogtjuende\" 23, \"attende\" 18, \"seksogtyvende\" 26, \"nionde\" 9, \"femogtjuende\" 25, \"toogtjuende\" 22, \"ellevte\" 11, \"fjärde\" 4, \"sekstende\" 16, \"femtonde\" 15, \"andra\" 2, \"tionde\" 10, \"syvogtyvende\" 27, \"enogtjuende\" 21, \"nittende\" 19, \"åttonde\" 8, \"enogtredefte\" 31, \"tredefte\" 30, \"sjunde\" 7, \"syttende\" 17, \"tyvende\" 20, \"trettonde\" 13, \"sjätte\" 6, \"första\" 1, \"åtteogtjuende\" 28, \"enogtyvende\" 21, \"syvogtjuende\" 27, \"femte\" 5, \"tjuende\" 20, \"fjortonde\" 14, \"förste\" 1, \"fireogtyvende\" 24, \"tolfte\" 12, \"niogtyvende\" 29, \"niogtjuende\" 29} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)(\\.|e?)\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]