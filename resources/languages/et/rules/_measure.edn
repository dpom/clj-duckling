[#clj-duckling.engine/rule {:name "number as distance", :pattern "(dim :number)", :production "{:dim :distance, :latent true, :value (:value %1)}"}
 #clj-duckling.engine/rule {:name "<latent dist> km", :pattern "[(dim :distance) #\"(?i)k(ilo)?m?(eter)?s?\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"kilometre\", :normalized {:value (* 1000 (-> %1 :value)), :unit \"metre\"}}))"}
 #clj-duckling.engine/rule {:name "<latent dist> feet", :pattern "[(dim :distance) #\"(?i)(′|f(oo|ee)?ts?)\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"foot\", :normalized {:value (* 0.3048 (-> %1 :value)), :unit \"metre\"}}))"}
 #clj-duckling.engine/rule {:name "<latent dist> inch", :pattern "[(dim :distance) #\"(?i)(′′|inch(es)?)\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"inch\", :normalized {:value (* 0.0254 (-> %1 :value)), :unit \"metre\"}}))"}
 #clj-duckling.engine/rule {:name "<latent dist> yard", :pattern "[(dim :distance) #\"(?i)y(ar)?ds?\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"yard\", :normalized {:value (* 0.9144 (-> %1 :value)), :unit \"metre\"}}))"}
 #clj-duckling.engine/rule {:name "<dist> meters", :pattern "[(dim :distance) #\"(?i)meters?\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"metre\"}))"}
 #clj-duckling.engine/rule {:name "<dist> centimeters", :pattern "[(dim :distance) #\"(?i)cm|centimeters?\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"centimetre\", :normalized {:value (* 0.01 (-> %1 :value)), :unit \"metre\"}}))"}
 #clj-duckling.engine/rule {:name "<dist> miles", :pattern "[(dim :distance) #\"(?i)miles?\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"mile\", :normalized {:value (* 1609 (-> %1 :value)), :unit \"metre\"}}))"}
 #clj-duckling.engine/rule {:name "<dist> m (ambiguous miles or meters)", :pattern "[(dim :distance) #\"(?i)m\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"m\"}))"}
 #clj-duckling.engine/rule {:name "number as volume", :pattern "(dim :number)", :production "{:dim :volume, :latent true, :value (:value %1)}"}
 #clj-duckling.engine/rule {:name "<latent vol> ml", :pattern "[(dim :volume) #\"(?i)m(l|illilit(er|re)s?)\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"millilitre\", :normalized {:value (* 0.001 (-> %1 :value)), :unit \"litre\"}}))"}
 #clj-duckling.engine/rule {:name "<vol> hectoliters", :pattern "[(dim :volume) #\"(?i)hectolit(er|re)s?\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"hectolitre\", :normalized {:value (* 100 (-> %1 :value)), :unit \"litre\"}}))"}
 #clj-duckling.engine/rule {:name "<vol> liters", :pattern "[(dim :volume) #\"(?i)l(it(er|re)s?)?\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"litre\"}))"}
 #clj-duckling.engine/rule {:name "half liter", :pattern "[#\"(?i)half lit(er|re)\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"litre\", :value 0.5}))"}
 #clj-duckling.engine/rule {:name "<latent vol> gallon", :pattern "[(dim :volume) #\"(?i)gal(l?ons?)?\"]", :production "(-> %1 (dissoc :latent) (merge {:unit \"gallon\", :normalized {:value (* 3.785 (-> %1 :value)), :unit \"litre\"}}))"}
 #clj-duckling.engine/rule {:name "<number> <units>", :pattern "[(dim :number) (dim :leven-unit)]", :production "{:dim :quantity, :value (:value %1), :unit (:value %2), :form :no-product}"}
 #clj-duckling.engine/rule {:name "a <unit>", :pattern "[#\"(?i)an?\" (dim :leven-unit)]", :production "{:dim :quantity, :value 1, :unit (:value %2), :form :no-product}"}
 #clj-duckling.engine/rule {:name "<quantity> of product", :pattern "[(dim :quantity (fn* [p1__3547#] (= :no-product (:form p1__3547#)))) #\"(?i)of\" (dim :leven-product)]", :production "(-> %1 (assoc :product (:value %3)) (dissoc :form))"}
 #clj-duckling.engine/rule {:name "<number> product", :pattern "[(dim :number) (dim :leven-product)]", :production "{:dim :quantity, :value (:value %1), :product (:value %2)}"}
 #clj-duckling.engine/rule {:name "a <product>", :pattern "[#\"(?i)an?\" (dim :leven-product)]", :production "{:dim :quantity, :value 1, :product (:value %2)}"}
 #clj-duckling.engine/rule {:name "<product>", :pattern "[(dim :leven-product)]", :production "{:dim :quantity, :value 1, :product (:value %1)}"}
 #clj-duckling.engine/rule {:name "pounds", :pattern "#\"pounds?\"", :production "{:dim :leven-unit, :value \"pound\"}"}
 #clj-duckling.engine/rule {:name "meat", :pattern "#\"meat\"", :production "{:dim :leven-product, :value \"meat\"}"}
 #clj-duckling.engine/rule {:name "cup", :pattern "#\"cups?\"", :production "{:dim :leven-unit, :value \"cup\"}"}
 #clj-duckling.engine/rule {:name "sugar", :pattern "#\"sugar\"", :production "{:dim :leven-product, :value \"sugar\"}"}]