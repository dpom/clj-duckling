[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3568#] (> (:grain p1__3568#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(null|üksteist|üks|kaksteist|kaks|kolmteist|kolm|neliteist|neli|viisteist|viis|kuusteist|kuus|seitseteist|seitse|kaheksateist|kaheksa|üheksateist|üheksa|kümme)\"", :production "{:dim :number, :integer true, :value (get {\"kolmteist\" 13, \"üksteist\" 11, \"üheksa\" 9, \"neliteist\" 14, \"kaks\" 2, \"null\" 0, \"neli\" 4, \"kolm\" 3, \"kuusteist\" 16, \"üks\" 1, \"kaheksateist\" 18, \"kuus\" 6, \"kümme\" 10, \"kaksteist\" 12, \"viis\" 5, \"viisteist\" 15, \"seitseteist\" 17, \"üheksateist\" 19, \"kaheksa\" 8, \"seitse\" 7} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)kümme\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "hundred", :pattern "#\"(?i)sada\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)tuhat\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)miljoni?t?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "a couple of", :pattern "#\"paar\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "(a )?few", :pattern "#\"mõni\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(kakskümmend|kolmkümmend|nelikümmend|viiskümmend|kuuskümmend|seitsekümmend|kaheksakümmend|üheksakümmend)\"", :production "{:dim :number, :integer true, :value (get {\"kakskümmend\" 20, \"kolmkümmend\" 30, \"nelikümmend\" 40, \"viiskümmend\" 50, \"kuuskümmend\" 60, \"seitsekümmend\" 70, \"kaheksakümmend\" 80, \"üheksakümmend\" 90} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3569#] (#{70 20 60 50 40 90 30 80} (:value p1__3569#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (200..900)", :pattern "#\"(?i)(kakssada|kolmsada|nelisada|viissada|kuussada|seitsesada|kaheksasada|üheksasada)\"", :production "{:dim :number, :integer true, :value (get {\"kakssada\" 200, \"kolmsada\" 300, \"nelisada\" 400, \"viissada\" 500, \"kuussada\" 600, \"seitsesada\" 700, \"kaheksasada\" 800, \"üheksasada\" 900} (-> %1 :groups first clojure.string/lower-case)), :grain 2}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator space", :pattern "#\"(\\d{1,3}(\\s\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\"\\s\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "number hundreds", :pattern "[(integer 1 99) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3570#] (not (:number-prefixed p1__3570#)))) #\"(?i)dot|point\" (dim :number (fn* [p1__3571#] (not (:number-suffixed p1__3571#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|miinus|negatiivne\" (dim :number (fn* [p1__3572#] (not (:number-prefixed p1__3572#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3573#] (not (:number-suffixed p1__3573#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..19th)", :pattern "#\"(?i)(esimene|teine|kolmas|neljas|viies|kuues|seitsmes|kaheksas|üheksas|kümnes|üheteistkümnes|kaheteistkümnes|kolmeteistkümnes|neljateistkümnes|viieteistkümnes|kuueteistkümnes|seitsmeteistkümnes|kaheksateistkümnes|üheksateistkümnes)\"", :production "{:dim :ordinal, :value (get {\"viies\" 5, \"kuues\" 6, \"kümnes\" 10, \"kolmas\" 3, \"kaheteistkümnes\" 12, \"kaheksas\" 8, \"kolmeteistkümnes\" 13, \"kaheksateistkümnes\" 18, \"esimene\" 1, \"viieteistkümnes\" 15, \"üheteistkümnes\" 11, \"neljateistkümnes\" 14, \"teine\" 2, \"kuueteistkümnes\" 16, \"seitsmes\" 7, \"üheksateistkümnes\" 19, \"neljas\" 4, \"seitsmeteistkümnes\" 17, \"üheksas\" 9} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)\\.\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]