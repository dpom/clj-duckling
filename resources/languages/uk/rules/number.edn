[#clj-duckling.engine/rule {:name "integer 0", :pattern "#\"(?i)(нуль)\"", :production "{:dim :number, :integer true, :value 0}"}
 #clj-duckling.engine/rule {:name "integer 1", :pattern "#\"(?i)(один|одна|одну|одне|одного)\"", :production "{:dim :number, :integer true, :value 1}"}
 #clj-duckling.engine/rule {:name "integer 2", :pattern "#\"(?i)(два|дві|двоє|пара|пару|парочку|парочка)\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "integer (3..19)", :pattern "#\"(?i)(три|чотирнадцять|чотири|п‘ятнадцять|п‘ять|шістнадцять|шість|сімнадцять|сім|вісімнадцять|вісім|дев‘ятнадцять|дев‘ять|десять|одинадцять|дванадцять|тринадцять)\"", :production "{:dim :number, :integer true, :value (get {\"вісімнадцять\" 18, \"десять\" 10, \"вісім\" 8, \"сімнадцять\" 17, \"чотири\" 4, \"дев‘ятнадцять\" 19, \"шістнадцять\" 16, \"тринадцять\" 13, \"шість\" 6, \"дванадцять\" 12, \"сім\" 7, \"одинадцять\" 11, \"три\" 3, \"чотирнадцять\" 14, \"п‘ятнадцять\" 15, \"дев‘ять\" 9, \"п‘ять\" 5} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(двадцять|тридцять|сорок|п‘ятдесят|шістдесят|сімдесят|вісімдесят|дев‘яносто)\"", :production "{:dim :number, :integer true, :value (get {\"двадцять\" 20, \"тридцять\" 30, \"сорок\" 40, \"п‘ятдесят\" 50, \"шістдесят\" 60, \"сімдесят\" 70, \"вісімдесят\" 80, \"дев‘яносто\" 90} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "integer (100..900)", :pattern "#\"(?i)(сто|двісті|триста|чотириста|п‘ятсот|шістсот|сімсот|вісімсот|дев‘ятсот)\"", :production "{:dim :number, :integer true, :value (get {\"шістсот\" 600, \"дев‘ятсот\" 900, \"двісті\" 200, \"вісімсот\" 800, \"сімсот\" 700, \"сто\" 100, \"п‘ятсот\" 500, \"триста\" 300, \"чотириста\" 400} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3545#] (#{70 20 60 50 40 90 30 80} (:value p1__3545#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer 101..999", :pattern "[(integer 100 900 (fn* [p1__3546#] (#{300 600 500 100 800 200 900 700 400} (:value p1__3546#)))) (integer 1 99)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3547#] (not (:number-prefixed p1__3547#)))) #\"(?i)крапка\" (dim :number (fn* [p1__3548#] (not (:number-suffixed p1__3548#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, minus", :pattern "[#\"(?i)-|мінус\\s?\" (dim :number (fn* [p1__3549#] (not (:number-prefixed p1__3549#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3550#] (not (:number-suffixed p1__3550#)))) #\"(?i)([кмг]|[КМГ])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"к\" 1000, \"м\" 1000000, \"г\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..19th)", :pattern "#\"(?i)(перш|друг|трет|четверт|п‘ят|шост|сьом|восьм|дев‘ят|десят|одинадцят|дванадцят|тринадцят|чотирнадцят|п‘ятнадцят|шістнадцят|сімнадцят|вісімнадцят|дев‘ятнадцят|двадцят)(ий|ій|а|я|е|є)\"", :production "{:dim :ordinal, :value (get {\"перш\" 1, \"вісімнадцят\" 18, \"тринадцят\" 13, \"п‘ят\" 5, \"десят\" 10, \"трет\" 3, \"четверт\" 4, \"сьом\" 7, \"дванадцят\" 12, \"двадцят\" 20, \"одинадцят\" 11, \"шост\" 6, \"друг\" 2, \"дев‘ятнадцят\" 19, \"шістнадцят\" 16, \"восьм\" 8, \"чотирнадцят\" 14, \"п‘ятнадцят\" 15, \"сімнадцят\" 17, \"дев‘ят\" 9} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal 21..99", :pattern "[#\"(?i)(двадцять|тридцять|сорок|п‘ятдесят|шістьдесят|сімдесят|вісімдесят|дев‘яносто)\" #\"(?i)(перш|друг|трет|четверт|п‘ят|шост|сьом|восьм|дев‘ят)(ий|ій|а|я|е|є)\"]", :production "{:dim :ordinal, :value (+ (get {\"двадцять\" 20, \"тридцять\" 30, \"сорок\" 40, \"п‘ятдесят\" 50, \"шістдесят\" 60, \"сімдесят\" 70, \"вісімдесят\" 80, \"дев‘яносто\" 90} (-> %1 :groups first clojure.string/lower-case)) (get {\"перш\" 1, \"п‘ят\" 5, \"трет\" 3, \"четверт\" 4, \"сьом\" 7, \"шост\" 6, \"друг\" 2, \"восьм\" 8, \"дев‘ят\" 9} (-> %2 :groups first clojure.string/lower-case)))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)-?(?i)((и|і)?й|а|я|е|є)\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]