[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3550#] (> (:grain p1__3550#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "intersect (with and)", :pattern "[(dim :number :grain (fn* [p1__3551#] (> (:grain p1__3551#) 1))) #\"(?i)and\" (dim :number)]", :production "(compose-numbers %1 %3)"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(không|một|linh một|lẻ một|hai|linh hai|lẻ hai|ba|linh ba|lẻ ba|bốn|linh bốn|lẻ bốn|năm|linh năm|lẻ năm|sáu|lẻ sáu|linh sáu|bảy|lẻ bảy|linh bảy|tám|linh tám|lẻ tám|chín|linh chín|lẻ chín|mười một|mười hai|mười ba|mười bốn|mười lăm|mười sáu|mười bảy|mười tám|mười chín|mười|linh mười)\"", :production "{:dim :number, :integer true, :value (get {\"lẻ bốn\" 4, \"một\" 1, \"linh bốn\" 4, \"năm\" 5, \"hai\" 2, \"lẻ năm\" 5, \"mười hai\" 12, \"mười ba\" 13, \"linh bảy\" 7, \"bốn\" 4, \"lẻ hai\" 2, \"mười tám\" 18, \"lẻ chín\" 9, \"linh mười\" 10, \"mười\" 10, \"linh sáu\" 6, \"linh một\" 1, \"mười một\" 11, \"sáu\" 6, \"lẻ bảy\" 7, \"lẻ tám\" 8, \"lẻ một\" 1, \"chín\" 9, \"mười lăm\" 15, \"linh hai\" 2, \"mười bảy\" 17, \"mười sáu\" 16, \"ba\" 3, \"lẻ\" 3, \"mười bốn\" 14, \"linh tám\" 8, \"linh năm\" 5, \"mười chín\" 19, \"bảy\" 7, \"linh chín\" 9, \"không\" 0, \"lẻ sáu\" 6, \"lẻ mười\" 10, \"tám\" 8, \"linh ba\" 3} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "tá", :pattern "#\"(?i)tá\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "trăm", :pattern "#\"(?i)trăm?\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "nghìn", :pattern "#\"(?i)nghìn?\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "triệu", :pattern "#\"(?i)triệu?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "tỷ", :pattern "#\"(?i)tỷ?\"", :production "{:dim :number, :integer true, :value 1000000000, :grain 9}"}
 #clj-duckling.engine/rule {:name "numbers 21 31 41 51 61 71 81 91", :pattern "[(integer 20 90 (fn* [p1__3552#] (#{70 20 60 50 40 90 30 80} (:value p1__3552#)))) #\"(?i)mốt\"]", :production "{:dim :number, :integer true, :value (+ (:value %1) 1)}"}
 #clj-duckling.engine/rule {:name "numbers 25 35 45 55 65 75 85 95", :pattern "[(integer 20 90 (fn* [p1__3553#] (#{70 20 60 50 40 90 30 80} (:value p1__3553#)))) #\"(?i)lăm\"]", :production "{:dim :number, :integer true, :value (+ (:value %1) 5)}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(hai mươi|ba mươi|bốn mươi|năm mươi|sáu mươi|bảy mươi|tám mươi|chín mươi)\"", :production "{:dim :number, :integer true, :value (get {\"hai mươi\" 20, \"ba mươi\" 30, \"bốn mươi\" 40, \"năm mươi\" 50, \"sáu mươi\" 60, \"bảy mươi\" 70, \"tám mươi\" 80, \"chín mươi\" 90} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3554#] (#{70 20 60 50 40 90 30 80} (:value p1__3554#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "number tá", :pattern "[(integer 1 10) (dim :number (fn* [p1__3555#] (:grouping p1__3555#)))]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number trăm", :pattern "[(integer 0 9) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number nghìn", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number triệu", :pattern "[(integer 1 999) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number tỷ", :pattern "[(integer 1 9999999999) (integer 1000000000 1000000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "number dot 1 9", :pattern "[(dim :number (fn* [p1__3556#] (not (:number-prefixed p1__3556#)))) #\"(?i)chấm|phẩy\" (integer 1 9)]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "number dot 10 99", :pattern "[(dim :number (fn* [p1__3557#] (not (:number-prefixed p1__3557#)))) #\"(?i)chấm|phẩy\" (integer 10 99)]", :production "{:dim :number, :value (+ (* 0.01 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "number dot 100 999", :pattern "[(dim :number (fn* [p1__3558#] (not (:number-prefixed p1__3558#)))) #\"(?i)chấm|phẩy\" (integer 100 999)]", :production "{:dim :number, :value (+ (* 0.001 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "number dot 1000 9999", :pattern "[(dim :number (fn* [p1__3559#] (not (:number-prefixed p1__3559#)))) #\"(?i)chấm|phẩy\" (integer 1000 9999)]", :production "{:dim :number, :value (+ (* 1.0E-4 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "number dot 10000 99999", :pattern "[(dim :number (fn* [p1__3560#] (not (:number-prefixed p1__3560#)))) #\"(?i)chấm|phẩy\" (integer 10000 99999)]", :production "{:dim :number, :value (+ (* 1.0E-5 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, âm", :pattern "[#\"(?i)-|âm\\s?\" (dim :number (fn* [p1__3561#] (not (:number-prefixed p1__3561#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3562#] (not (:number-suffixed p1__3562#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals", :pattern "#\"(?i)(đầu tiên|thứ nhất|thứ 1)\"", :production "{:dim :ordinal, :value (get {\"đầu tiên\" 1, \"thứ nhất\" 1, \"thứ 1\" 1} (-> %1 :groups first clojure.string/lower-case))}"}]