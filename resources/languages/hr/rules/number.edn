[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3552#] (> (:grain p1__3552#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "numbers i", :pattern "[(integer 20 90 (fn* [p1__3553#] (#{70 20 60 50 40 90 30 80} (:value p1__3553#)))) #\"i\" (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(ni(s|š)ta|ni(s|š)tica|nula|jedanaest|dvanaest|trinaest|jeda?n(a|u|o(ga?)?)?|dv(i?je)?(a|o)?(ma)?|tri(ma)?|(č|c)etiri|(č|c)etrnaest|petnaest|pet|(s|š)esnaest|(š|s)est|sedamnaest|sedam|osamnaest|osam|devetnaest|devet)\"", :production "{:dim :number, :integer true, :value (get {\"dvoma\" 2, \"ništa\" 0, \"dvije\" 2, \"devet\" 9, \"jednoga\" 1, \"cetrnaest\" 14, \"trinaest\" 13, \"osamnaest\" 18, \"trima\" 3, \"jedna\" 1, \"sedam\" 7, \"jednog\" 1, \"šest\" 6, \"četiri\" 4, \"dvanaest\" 12, \"jednu\" 1, \"šesnaest\" 16, \"sedamnaest\" 17, \"dvje\" 2, \"devetnaest\" 19, \"ništica\" 0, \"cetiri\" 4, \"sesnaest\" 16, \"petnaest\" 15, \"osam\" 8, \"nistica\" 0, \"jedan\" 1, \"pet\" 5, \"nista\" 0, \"četrnaest\" 14, \"nula\" 0, \"tri\" 3, \"dva\" 2, \"dvama\" 2, \"jedanaest\" 11} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "single", :pattern "#\"(?i)sam\"", :production "{:dim :number, :integer true, :value 1, :grain 1}"}
 #clj-duckling.engine/rule {:name "a pair", :pattern "#\"(?i)par\"", :production "{:dim :number, :integer true, :value 2, :grain 1}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)deset|cener\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)tucet?\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "hundered", :pattern "#\"(?i)stotin(u|a|e)\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)tisu(c|ć)(a|u|e)\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)milij(u|o)na?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "couple", :pattern "#\"(?i)par\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "few", :pattern "#\"nekoliko\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(dvadeset|trideset|(c|č)etrdeset|pedeset|(š|s)esdeset|sedamdeset|osamdeset|devedeset)\"", :production "{:dim :number, :integer true, :value (get {\"cetrdeset\" 40, \"devedeset\" 90, \"sesdeset\" 60, \"trideset\" 30, \"šesdeset\" 60, \"osamdeset\" 80, \"dvadeset\" 20, \"pedeset\" 50, \"četrdeset\" 40, \"sedamdeset\" 70} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer (100..900)", :pattern "#\"(?i)(sto|dvjest(o|a)|tristo|(c|č)etiristo|petsto|(š|s)esto|sedamsto|osamsto|devetsto)\"", :production "{:dim :number, :integer true, :value (get {\"petsto\" 500, \"dvjesta\" 200, \"sedamsto\" 700, \"tristo\" 300, \"osamsto\" 800, \"cetiristo\" 400, \"dvjesto\" 200, \"šesto\" 600, \"devetsto\" 900, \"sto\" 100, \"sesto\" 600, \"četiristo\" 400} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3554#] (#{70 20 60 50 40 90 30 80} (:value p1__3554#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "numbers 100..999", :pattern "[(integer 1 9) (integer 100 100) (integer 0 99)]", :production "{:dim :number, :integer true, :value (+ (* (:value %1) (:value %2)) (:value %3))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator .", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (.longValue (.parse (NumberFormat/getInstance Locale/GERMAN) (first (:groups %1))))}"}
 #clj-duckling.engine/rule {:name "number hundreds", :pattern "[(integer 1 99) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (.doubleValue (.parse (NumberFormat/getInstance Locale/GERMAN) (first (:groups %1))))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3555#] (not (:number-prefixed p1__3555#)))) #\"(?i)cijela|to(c|č)ka|zarez\" (dim :number (fn* [p1__3556#] (not (:number-suffixed p1__3556#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+\\,\\d+)\"", :production "{:dim :number, :value (.doubleValue (.parse (NumberFormat/getInstance Locale/GERMAN) (first (:groups %1))))}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|minus|negativ\" (dim :number (fn* [p1__3557#] (not (:number-prefixed p1__3557#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3558#] (not (:number-suffixed p1__3558#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..19th)", :pattern "#\"(?i)(prv(i|a|o(ga?)?)|drug(i|a|o(ga?)?)|tre(c|ć)(i|a|e(ga?)?)|(č|c)etvrt(i|a|o(ga?)?)|pet(i|a|o(ga?)?)|(š|s)est(i|a|o(ga?)?)|sedm(i|a|o(ga?)?)|osm(i|a|o(ga?)?)|devet(i|a|o(ga?)?)|deset(i|a|o(ga?)?)|jedanaest(i|a|o(ga?)?)|dvanaest(i|a|o(ga?)?)|trinaest(i|a|o(ga?)?)|(c|č)etrnaest(i|a|o(ga?)?)|petnaest(i|a|o(ga?)?)|(s|š)esnaest(i|a|o(ga?)?)|sedamnaest(i|a|o(ga?)?)|osamnaest(i|a|o(ga?)?)|devetnaest(i|a|o(ga?)?))\"", :production "{:dim :ordinal, :value (get {\"cetrnaestog\" 14, \"jedanaestoga\" 11, \"trinaesta\" 13, \"petnaestog\" 15, \"četvrti\" 4, \"prva\" 1, \"sedamnaesto\" 17, \"osamnaestoga\" 18, \"cetrnaesto\" 14, \"devetog\" 9, \"sesti\" 6, \"cetrnaesti\" 14, \"deveta\" 9, \"sedmi\" 7, \"četvrtoga\" 4, \"sedamnaestoga\" 17, \"prvi\" 1, \"trinaestoga\" 13, \"sedmog\" 7, \"četrnaestoga\" 14, \"sesnaesto\" 16, \"drugoga\" 2, \"osamnaestog\" 18, \"trinaestog\" 13, \"sedamnaesti\" 17, \"dvanaesto\" 12, \"deveto\" 9, \"sedamnaesta\" 17, \"sedma\" 7, \"cetrnaesta\" 14, \"šestoga\" 6, \"devetnaestoga\" 19, \"treći\" 3, \"osmo\" 8, \"sesnaestog\" 16, \"četrnaesto\" 14, \"petnaesto\" 15, \"trinaesto\" 13, \"devetnaestog\" 19, \"prvoga\" 1, \"četrnaesta\" 14, \"sedmo\" 7, \"osamnaesti\" 18, \"osamnaesta\" 18, \"desetoga\" 10, \"cetrnaestoga\" 14, \"peto\" 5, \"osmog\" 8, \"sesnaesti\" 16, \"drugo\" 2, \"osma\" 8, \"šestog\" 6, \"šesnaestoga\" 16, \"devetoga\" 9, \"jedanaesta\" 11, \"trećega\" 3, \"jedanaesti\" 11, \"jedanaesto\" 11, \"trece\" 3, \"deveti\" 9, \"prvo\" 1, \"petnaesta\" 15, \"devetnaesto\" 19, \"sestoga\" 6, \"sesta\" 6, \"sesnaesta\" 16, \"šesta\" 6, \"jedanaestog\" 11, \"petnaesti\" 15, \"trećeg\" 3, \"sedamnaestog\" 17, \"osmi\" 8, \"šesnaesto\" 16, \"treca\" 3, \"peti\" 5, \"cetvrtoga\" 4, \"trinaesti\" 13, \"desetog\" 10, \"cetvrto\" 4, \"petoga\" 5, \"četrnaesti\" 14, \"cetvrtog\" 4, \"sesnaestoga\" 16, \"druga\" 2, \"petog\" 5, \"cetvrti\" 4, \"četvrtog\" 4, \"šesnaesti\" 16, \"treća\" 3, \"četrnaestog\" 14, \"šesnaesta\" 16, \"šesto\" 6, \"devetnaesti\" 19, \"dvanaestog\" 12, \"osamnaesto\" 18, \"dvanaesti\" 12, \"peta\" 5, \"osmoga\" 8, \"šesti\" 6, \"deseta\" 10, \"deseto\" 10, \"petnaestoga\" 15, \"sedmoga\" 7, \"prvog\" 1, \"dvanaesta\" 12, \"dvanaestoga\" 12, \"šesnaestog\" 16, \"sesto\" 6, \"drugi\" 2, \"cetvrta\" 4, \"deseti\" 10, \"četvrto\" 4, \"sestog\" 6, \"devetnaesta\" 19, \"treci\" 3, \"drugog\" 2, \"četvrta\" 4} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)(\\.| ?(t(i|a)(n|r|s)?)|(ste(n|r|s)?))\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]