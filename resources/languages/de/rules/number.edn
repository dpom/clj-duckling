[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3547#] (> (:grain p1__3547#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "numbers und", :pattern "[(integer 1 9) #\"und\" (integer 20 90 (fn* [p1__3548#] (#{70 20 60 50 40 90 30 80} (:value p1__3548#))))]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(keine?|keine?s|keiner|keinen|null|nichts|eins?(er)?|zwei|dreizehn|drei|vierzehn|vier|fünf|sechzehn|sechs|siebzehn|sieben|achtzehn|acht|neunzehn|neun|elf|zwölf|füfzehn)\"", :production "{:dim :number, :integer true, :value (get {\"fünfzehn\" 15, \"fünf\" 5, \"nichts\" 0, \"acht\" 8, \"einer\" 1, \"keine\" 0, \"sechs\" 6, \"null\" 0, \"neunzehn\" 19, \"sechzehn\" 16, \"elf\" 11, \"zehn\" 10, \"vier\" 4, \"eins\" 1, \"dreizehn\" 13, \"zwei\" 2, \"ein\" 1, \"vierzehn\" 14, \"eine\" 1, \"keiner\" 0, \"kein\" 0, \"keins\" 0, \"sieben\" 7, \"keinen\" 0, \"keines\" 0, \"zwölf\" 12, \"siebzehn\" 17, \"achtzehn\" 18, \"drei\" 3, \"neun\" 9} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)zehn\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)dutzend\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "hundred", :pattern "#\"(?i)hunderte?\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)tausende?\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)million(en)?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "couple", :pattern "#\"(?i)(ein )?paar\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "few", :pattern "#\"(?i)mehrere\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(zwanzig|dreissig|vierzig|fünfzig|sechzig|siebzig|achtzig|neunzig)\"", :production "{:dim :number, :integer true, :value (get {\"zwanzig\" 20, \"dreissig\" 30, \"vierzig\" 40, \"fünfzig\" 50, \"sechzig\" 60, \"siebzig\" 70, \"achtzig\" 80, \"neunzig\" 90} (-> %1 :groups first clojure.string/lower-case)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer ([2-9][1-9])", :pattern "#\"(?i)(ein|zwei|drei|vier|fünf|sechs|sieben|acht|neun)und(zwanzig|dreissig|vierzig|fünfzig|sechzig|siebzig|achtzig|neunzig)\"", :production "{:dim :number, :integer true, :value (+ (get {\"fünf\" 5, \"acht\" 8, \"sechs\" 6, \"vier\" 4, \"zwei\" 2, \"ein\" 1, \"sieben\" 7, \"drei\" 3, \"neun\" 9} (-> %1 :groups first clojure.string/lower-case)) (get {\"zwanzig\" 20, \"dreissig\" 30, \"vierzig\" 40, \"fünfzig\" 50, \"sechzig\" 60, \"siebzig\" 70, \"achtzig\" 80, \"neunzig\" 90} (-> %1 :groups second clojure.string/lower-case)))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator .", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (.longValue (.parse (NumberFormat/getInstance Locale/GERMAN) (first (:groups %1))))}"}
 #clj-duckling.engine/rule {:name "number hundreds", :pattern "[(integer 1 99) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (.doubleValue (.parse (NumberFormat/getInstance Locale/GERMAN) (first (:groups %1))))}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3549#] (not (:number-prefixed p1__3549#)))) #\"(?i)komma\" (dim :number (fn* [p1__3550#] (not (:number-suffixed p1__3550#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+\\,\\d+)\"", :production "{:dim :number, :value (.doubleValue (.parse (NumberFormat/getInstance Locale/GERMAN) (first (:groups %1))))}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|minus|negativ\" (dim :number (fn* [p1__3551#] (not (:number-prefixed p1__3551#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3552#] (not (:number-suffixed p1__3552#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..19th)", :pattern "#\"(?i)(erste(r|s)?|zweite(r|s)|dritte(r|s)|vierte(r|s)|fuenfte(r|s)|sechste(r|s)|siebte(r|s)|achte(r|s)|neunte(r|s)|zehnte(r|s)|elfter|zwölfter|dreizenter|vierzehnter|fünfzehnter|sechzenter|siebzehnter|achtzehnter|neunzehnter)\"", :production "{:dim :ordinal, :value (get {\"zehnte\" 10, \"fünftes\" 5, \"zehnter\" 10, \"elfter\" 11, \"drittes\" 3, \"dreizehnter\" 13, \"achtes\" 8, \"fünfter\" 5, \"sechste\" 6, \"viertes\" 4, \"sechstes\" 6, \"erstes\" 1, \"vierte\" 4, \"zehntes\" 10, \"achte\" 8, \"neunzehnter\" 19, \"neuntes\" 9, \"siebtes\" 7, \"vierter\" 4, \"vierzehnter\" 14, \"zwölfter\" 12, \"erster\" 1, \"fünfte\" 5, \"neunter\" 9, \"achter\" 8, \"zweiter\" 2, \"neunte\" 9, \"siebte\" 7, \"dritte\" 3, \"erste\" 1, \"siebzehnter\" 17, \"fünfzehnter\" 15, \"zweite\" 2, \"dritter\" 3, \"sechster\" 6, \"achtzehnter\" 18, \"siebter\" 7, \"sechzehnter\" 16, \"zweites\" 2} (-> %1 :groups first clojure.string/lower-case))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)(\\.| ?(te(n|r|s)?)|(ste(n|r|s)?))\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]