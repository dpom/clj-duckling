[#clj-duckling.engine/rule {:name "intersect", :pattern "[(dim :number :grain (fn* [p1__3547#] (> (:grain p1__3547#) 1))) (dim :number)]", :production "(compose-numbers %1 %2)"}
 #clj-duckling.engine/rule {:name "numbers og", :pattern "[(integer 1 9) #\"og\" (integer 20 90 (fn* [p1__3548#] (#{70 20 60 50 40 90 30 80} (:value p1__3548#))))]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %3))}"}
 #clj-duckling.engine/rule {:name "integer (0..19)", :pattern "#\"(?i)(intet|ingen|nul|en|et|én|ét|to|tretten|tre|fire|femten|fem|seksten|seks|syv|otte|nitten|ni|ti|elleve|tolv|fjorten|sytten|atten)\"", :production "{:dim :number, :integer true, :value (get {\"tolv\" 12, \"en\" 1, \"fem\" 5, \"otte\" 8, \"seks\" 6, \"nitten\" 19, \"ingen\" 0, \"nul\" 0, \"femten\" 15, \"ti\" 10, \"ni\" 9, \"tre\" 3, \"intet\" 0, \"elleve\" 11, \"et\" 1, \"sytten\" 17, \"seksten\" 16, \"tretten\" 13, \"syv\" 7, \"to\" 2, \"fjorten\" 14, \"ét\" 1, \"atten\" 18, \"fire\" 4, \"én\" 1} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "ten", :pattern "#\"(?i)ti\"", :production "{:dim :number, :integer true, :value 10, :grain 1}"}
 #clj-duckling.engine/rule {:name "single", :pattern "#\"(?i)enkelt\"", :production "{:dim :number, :integer true, :value 1, :grain 1}"}
 #clj-duckling.engine/rule {:name "a pair", :pattern "#\"(?i)et par\"", :production "{:dim :number, :integer true, :value 2, :grain 1}"}
 #clj-duckling.engine/rule {:name "dozen", :pattern "#\"(?i)dusin\"", :production "{:dim :number, :integer true, :value 12, :grain 1, :grouping true}"}
 #clj-duckling.engine/rule {:name "hundred", :pattern "#\"(?i)hundrede?\"", :production "{:dim :number, :integer true, :value 100, :grain 2}"}
 #clj-duckling.engine/rule {:name "thousand", :pattern "#\"(?i)tusinde?\"", :production "{:dim :number, :integer true, :value 1000, :grain 3}"}
 #clj-duckling.engine/rule {:name "million", :pattern "#\"(?i)million(er)?\"", :production "{:dim :number, :integer true, :value 1000000, :grain 6}"}
 #clj-duckling.engine/rule {:name "couple", :pattern "#\"et par\"", :production "{:dim :number, :integer true, :value 2}"}
 #clj-duckling.engine/rule {:name "few", :pattern "#\"(nogle )?få\"", :production "{:dim :number, :integer true, :precision :approximate, :value 3}"}
 #clj-duckling.engine/rule {:name "integer (20..90)", :pattern "#\"(?i)(tyve|tredive|fyrre|halvtreds|tres|halvfjerds|firs|halvfems)\"", :production "{:dim :number, :integer true, :value (get {\"tyve\" 20, \"tredive\" 30, \"fyrre\" 40, \"halvtreds\" 50, \"tres\" 60, \"halvfjerds\" 70, \"firs\" 80, \"halvfems\" 90} (-> %1 :groups first .toLowerCase)), :grain 1}"}
 #clj-duckling.engine/rule {:name "integer 21..99", :pattern "[(integer 10 90 (fn* [p1__3549#] (#{70 20 60 50 40 90 30 80} (:value p1__3549#)))) (integer 1 9)]", :production "{:dim :number, :integer true, :value (+ (:value %1) (:value %2))}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator .", :pattern "#\"(\\d{1,3}(\\.\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "number hundreds", :pattern "[(integer 1 99) (integer 100 100)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number thousands", :pattern "[(integer 1 999) (integer 1000 1000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "number millions", :pattern "[(integer 1 99) (integer 1000000 1000000)]", :production "{:dim :number, :integer true, :value (* (:value %1) (:value %2)), :grain (:grain %2)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \".\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "number dot number", :pattern "[(dim :number (fn* [p1__3550#] (not (:number-prefixed p1__3550#)))) #\"(?i)komma\" (dim :number (fn* [p1__3551#] (not (:number-suffixed p1__3551#))))]", :production "{:dim :number, :value (+ (* 0.1 (:value %3)) (:value %1))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(\\.\\d\\d\\d)+\\,\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\"\\.\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|minus\\s?|negativ\\s?\" (dim :number (fn* [p1__3552#] (not (:number-prefixed p1__3552#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3553#] (not (:number-suffixed p1__3553#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first .toLowerCase)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "ordinals (first..31st)", :pattern "#\"(?i)(første|anden|tredje|fjerde|femte|sjette|syvende|ottende|niende|tiende|elfte|tolvte|trettende|fjortende|femtende|sekstende|syttende|attende|nittende|tyvende|tenogtyvende|toogtyvende|treogtyvende|fireogtyvende|femogtyvende|seksogtyvende|syvogtyvende|otteogtyvende|niogtyvende|tredivte|enogtredivte)\"", :production "{:dim :ordinal, :value (get {\"tiende\" 10, \"treogtyvende\" 23, \"toogtyvende\" 22, \"tredje\" 3, \"fjerde\" 4, \"enogtredivte\" 31, \"syvende\" 7, \"tenogtyvende\" 21, \"elfte\" 11, \"femogtyvende\" 25, \"attende\" 18, \"seksogtyvende\" 26, \"første\" 1, \"fjortende\" 14, \"sekstende\" 16, \"trettende\" 13, \"tolvte\" 12, \"syvogtyvende\" 27, \"nittende\" 19, \"femtende\" 15, \"syttende\" 17, \"tyvende\" 20, \"ottende\" 8, \"otteogtyvende\" 28, \"sjette\" 6, \"anden\" 2, \"femte\" 5, \"fireogtyvende\" 24, \"niogtyvende\" 29, \"niende\" 9, \"tredivte\" 30} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+)(\\.|ste?)\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}]