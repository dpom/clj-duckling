[#clj-duckling.engine/rule {:name "ordinals (chéad, dara, etc.)", :pattern "#\"(?i)(ch[ée]ad|aon[úu]|t-aon[úu]|dara|tr[íi][úu]|ceathr[úu]|c[úu]igi[úu]|s[ée][úu]|seacht[úu]|ocht[úu]|t-ocht[úu]|nao[úu]|deichi[úu]|fichi[úu]|tr[íi]ochad[úu]|daichead[úu]|caogad[úu]|seascad[úu]|seacht[óo]d[úu]|ocht[óo]d[úu]|t-ocht[óo]d[úu]|n[óo]chad[úu]|c[ée]ad[úu]|mili[úu]|milli[úu]n[úu])\"", :production "{:dim :ordinal, :value (get {\"nóchadú\" 90, \"triú\" 3, \"cúigiu\" 5, \"deichiu\" 10, \"cúigiú\" 5, \"milliunú\" 1000000, \"miliu\" 1000, \"milliunu\" 1000000, \"nóchadu\" 90, \"t-ochtú\" 8, \"seachtodu\" 70, \"t-aonu\" 1, \"cuigiu\" 5, \"fichiu\" 20, \"seachtodú\" 70, \"ochtódu\" 80, \"chead\" 1, \"aonu\" 1, \"ochtodu\" 80, \"ceathrú\" 4, \"tríu\" 3, \"tríochadu\" 30, \"seascadu\" 60, \"ochtu\" 8, \"milliúnu\" 1000000, \"séu\" 6, \"nochadú\" 90, \"seachtu\" 7, \"seachtódú\" 70, \"céadú\" 100, \"seachtú\" 7, \"miliú\" 1000, \"t-ochtu\" 8, \"aonú\" 1, \"séú\" 6, \"t-ochtodu\" 80, \"t-ochtódú\" 80, \"deichiú\" 10, \"t-ochtodú\" 80, \"ochtú\" 8, \"fichiú\" 20, \"seu\" 6, \"naou\" 9, \"seachtódu\" 70, \"caogadu\" 50, \"tríú\" 3, \"ochtódú\" 80, \"daicheadú\" 40, \"triochadu\" 30, \"daicheadu\" 40, \"cuigiú\" 5, \"tríochadú\" 30, \"triochadú\" 30, \"nochadu\" 90, \"seú\" 6, \"ceadú\" 100, \"chéad\" 1, \"t-ochtódu\" 80, \"dara\" 2, \"ceathru\" 4, \"triu\" 3, \"t-aonú\" 1, \"naoú\" 9, \"ochtodú\" 80, \"ceadu\" 100, \"céadu\" 100, \"caogadú\" 50, \"seascadú\" 60, \"milliúnú\" 1000000} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "ordinal (digits)", :pattern "#\"0*(\\d+) ?(?i)(a|d|[úu])\"", :production "{:dim :ordinal, :value (read-string (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "count numbers", :pattern "#\"(?i)a (n[áa]id|haon|d[óo]|tr[íi]|ceathair|c[úu]ig|s[ée]|seacht|hocht|naoi|deich)\"", :production "{:dim :number, :integer true, :value (get {\"dó\" 2, \"naoi\" 9, \"deich\" 10, \"naid\" 0, \"cuig\" 5, \"sé\" 6, \"cúig\" 5, \"haon\" 1, \"seacht\" 7, \"hocht\" 8, \"ceathair\" 4, \"se\" 6, \"do\" 2, \"trí\" 3, \"náid\" 0, \"tri\" 3} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "numbers, 20-90", :pattern "#\"(?i)(fiche|tr[íi]ocha|daichead|caoga|seasca|seacht[óo]|ocht[óo]|n[óo]cha)\"", :production "{:dim :number, :integer true, :value (get {\"fiche\" 20, \"seachto\" 70, \"triocha\" 30, \"nócha\" 90, \"ochto\" 80, \"daichead\" 40, \"nocha\" 90, \"ochtó\" 80, \"seachtó\" 70, \"caoga\" 50, \"seasca\" 60, \"tríocha\" 30} (-> %1 :groups first .toLowerCase)), :grain 1}"}
 #clj-duckling.engine/rule {:name "numbers, 1-10", :pattern "#\"(?i)(aon|dh[áa]|tr[íi]|ceithre|c[úu]ig|seacht|s[ée]|ocht|naoi|deich)\"", :production "{:dim :number, :integer true, :value (get {\"ocht\" 8, \"dha\" 2, \"dhá\" 2, \"naoi\" 9, \"aon\" 1, \"deich\" 10, \"cuig\" 5, \"sé\" 6, \"cúig\" 5, \"ceithre\" 4, \"seacht\" 7, \"se\" 6, \"trí\" 3, \"tri\" 3} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "old vigesimal numbers, 20s", :pattern "#\"(?i)is (dh?[áa] fhichead|tr[íi] fichid|ceithre fichid)\"", :production "{:dim :number, :integer true, :value (get {\"dá fhichead\" 40, \"da fhichead\" 40, \"dhá fhichead\" 40, \"dha fhichead\" 40, \"trí fichid\" 60, \"tri fichid\" 60, \"ceithre fichid\" 80} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "old vigesimal numbers, 20s + 10", :pattern "#\"(?i)d[ée]ag is (fiche|dh?[áa] fhichead|tr[íi] fichid|ceithre fichid)\"", :production "{:dim :number, :integer true, :value (get {\"fiche\" 30, \"dá fhichead\" 50, \"da fhichead\" 50, \"dhá fhichead\" 50, \"dha fhichead\" 50, \"trí fichid\" 70, \"tri fichid\" 70, \"ceithre fichid\" 90} (-> %1 :groups first .toLowerCase))}"}
 #clj-duckling.engine/rule {:name "déag", :pattern "#\"(?i)d[ée]ag\"", :production "{:dim :number, :integer true, :value 10}"}
 #clj-duckling.engine/rule {:name "amháin", :pattern "#\"(?i)amh[áa]in\"", :production "{:dim :number, :integer true, :value 1}"}
 #clj-duckling.engine/rule {:name "integer (numeric)", :pattern "#\"(\\d{1,18})\"", :production "{:dim :number, :integer true, :value (Long/parseLong (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "integer with thousands separator ,", :pattern "#\"(\\d{1,3}(,\\d\\d\\d){1,5})\"", :production "{:dim :number, :integer true, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Long/parseLong)}"}
 #clj-duckling.engine/rule {:name "decimal number", :pattern "#\"(\\d*\\.\\d+)\"", :production "{:dim :number, :value (Double/parseDouble (first (:groups %1)))}"}
 #clj-duckling.engine/rule {:name "decimal with thousands separator", :pattern "#\"(\\d+(,\\d\\d\\d)+\\.\\d+)\"", :production "{:dim :number, :value (-> (:groups %1) first (clojure.string/replace #\",\" \"\") Double/parseDouble)}"}
 #clj-duckling.engine/rule {:name "numbers suffixes (K, M, G)", :pattern "[(dim :number (fn* [p1__3549#] (not (:number-suffixed p1__3549#)))) #\"(?i)([kmg])(?=[\\W\\$€]|$)\"]", :production "(let [multiplier (get {\"k\" 1000, \"m\" 1000000, \"g\" 1000000000} (-> %2 :groups first clojure.string/lower-case)) value (* (:value %1) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %1 :value value :integer int? :number-suffixed true))"}
 #clj-duckling.engine/rule {:name "numbers prefix with -, negative or minus", :pattern "[#\"(?i)-|m[íi]neas(\\sa)?\\s?\" (dim :number (fn* [p1__3550#] (not (:number-prefixed p1__3550#))))]", :production "(let [multiplier -1 value (* (:value %2) multiplier) int? (zero? (mod value 1)) value (if int? (long value) value)] (assoc %2 :value value :integer int? :number-prefixed true))"}]